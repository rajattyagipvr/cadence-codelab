// Copyright (c) 2017 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// Autogenerated by Thrift Compiler (0.10.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package cadence

import (
	"bytes"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"go.uber.org/cadence/.gen/go/shared"

)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

var _ = shared.GoUnusedProtection__
type WorkflowService interface {  //WorkflowService API is exposed to provide support for long running applications.  Application is expected to call
  //StartWorkflowExecution to create an instance for each instance of long running workflow.  Such applications are expected
  //to have a worker which regularly polls for DecisionTask and ActivityTask from the WorkflowService.  For each
  //DecisionTask, application is expected to process the history of events for that session and respond back with next
  //decisions.  For each ActivityTask, application is expected to execute the actual logic for that task and respond back
  //with completion or failure.  Worker is expected to regularly heartbeat while activity task is running.
  //

  // RegisterDomain creates a new domain which can be used as a container for all resources.  Domain is a top level
  // entity within Cadence, used as a container for all resources like workflow executions, tasklists, etc.  Domain
  // acts as a sandbox and provides isolation for all resources within the domain.  All resources belongs to exactly one
  // domain.
  // 
  // 
  // Parameters:
  //  - RegisterRequest
  RegisterDomain(registerRequest *shared.RegisterDomainRequest) (err error)
  // DescribeDomain returns the information and configuration for a registered domain.
  // 
  // 
  // Parameters:
  //  - DescribeRequest
  DescribeDomain(describeRequest *shared.DescribeDomainRequest) (r *shared.DescribeDomainResponse, err error)
  // UpdateDomain is used to update the information and configuration for a registered domain.
  // 
  // 
  // Parameters:
  //  - UpdateRequest
  UpdateDomain(updateRequest *shared.UpdateDomainRequest) (r *shared.UpdateDomainResponse, err error)
  // DeprecateDomain us used to update status of a registered domain to DEPRECATED.  Once the domain is deprecated
  // it cannot be used to start new workflow executions.  Existing workflow executions will continue to run on
  // deprecated domains.
  // 
  // 
  // Parameters:
  //  - DeprecateRequest
  DeprecateDomain(deprecateRequest *shared.DeprecateDomainRequest) (err error)
  // StartWorkflowExecution starts a new long running workflow instance.  It will create the instance with
  // 'WorkflowExecutionStarted' event in history and also schedule the first DecisionTask for the worker to make the
  // first decision for this instance.  It will return 'WorkflowExecutionAlreadyStartedError', if an instance already
  // exists with same workflowId.
  // 
  // 
  // Parameters:
  //  - StartRequest
  StartWorkflowExecution(startRequest *shared.StartWorkflowExecutionRequest) (r *shared.StartWorkflowExecutionResponse, err error)
  // Returns the history of specified workflow execution.  It fails with 'EntityNotExistError' if speficied workflow
  // execution in unknown to the service.
  // 
  // 
  // Parameters:
  //  - GetRequest
  GetWorkflowExecutionHistory(getRequest *shared.GetWorkflowExecutionHistoryRequest) (r *shared.GetWorkflowExecutionHistoryResponse, err error)
  // PollForDecisionTask is called by application worker to process DecisionTask from a specific taskList.  A
  // DecisionTask is dispatched to callers for active workflow executions, with pending decisions.
  // Application is then expected to call 'RespondDecisionTaskCompleted' API when it is done processing the DecisionTask.
  // It will also create a 'DecisionTaskStarted' event in the history for that session before handing off DecisionTask to
  // application worker.
  // 
  // 
  // Parameters:
  //  - PollRequest
  PollForDecisionTask(pollRequest *shared.PollForDecisionTaskRequest) (r *shared.PollForDecisionTaskResponse, err error)
  // RespondDecisionTaskCompleted is called by application worker to complete a DecisionTask handed as a result of
  // 'PollForDecisionTask' API call.  Completing a DecisionTask will result in new events for the workflow execution and
  // potentially new ActivityTask being created for corresponding decisions.  It will also create a DecisionTaskCompleted
  // event in the history for that session.  Use the 'taskToken' provided as response of PollForDecisionTask API call
  // for completing the DecisionTask.
  // 
  // 
  // Parameters:
  //  - CompleteRequest
  RespondDecisionTaskCompleted(completeRequest *shared.RespondDecisionTaskCompletedRequest) (err error)
  // PollForActivityTask is called by application worker to process ActivityTask from a specific taskList.  ActivityTask
  // is dispatched to callers whenever a ScheduleTask decision is made for a workflow execution.
  // Application is expected to call 'RespondActivityTaskCompleted' or 'RespondActivityTaskFailed' once it is done
  // processing the task.
  // Application also needs to call 'RecordActivityTaskHeartbeat' API within 'heartbeatTimeoutSeconds' interval to
  // prevent the task from getting timed out.  An event 'ActivityTaskStarted' event is also written to workflow execution
  // history before the ActivityTask is dispatched to application worker.
  // 
  // 
  // Parameters:
  //  - PollRequest
  PollForActivityTask(pollRequest *shared.PollForActivityTaskRequest) (r *shared.PollForActivityTaskResponse, err error)
  // RecordActivityTaskHeartbeat is called by application worker while it is processing an ActivityTask.  If worker fails
  // to heartbeat within 'heartbeatTimeoutSeconds' interval for the ActivityTask, then it will be marked as timedout and
  // 'ActivityTaskTimedOut' event will be written to the workflow history.  Calling 'RecordActivityTaskHeartbeat' will
  // fail with 'EntityNotExistsError' in such situations.  Use the 'taskToken' provided as response of
  // PollForActivityTask API call for heartbeating.
  // 
  // 
  // Parameters:
  //  - HeartbeatRequest
  RecordActivityTaskHeartbeat(heartbeatRequest *shared.RecordActivityTaskHeartbeatRequest) (r *shared.RecordActivityTaskHeartbeatResponse, err error)
  // RespondActivityTaskCompleted is called by application worker when it is done processing an ActivityTask.  It will
  // result in a new 'ActivityTaskCompleted' event being written to the workflow history and a new DecisionTask
  // created for the workflow so new decisions could be made.  Use the 'taskToken' provided as response of
  // PollForActivityTask API call for completion. It fails with 'EntityNotExistsError' if the taskToken is not valid
  // anymore due to activity timeout.
  // 
  // 
  // Parameters:
  //  - CompleteRequest
  RespondActivityTaskCompleted(completeRequest *shared.RespondActivityTaskCompletedRequest) (err error)
  // RespondActivityTaskFailed is called by application worker when it is done processing an ActivityTask.  It will
  // result in a new 'ActivityTaskFailed' event being written to the workflow history and a new DecisionTask
  // created for the workflow instance so new decisions could be made.  Use the 'taskToken' provided as response of
  // PollForActivityTask API call for completion. It fails with 'EntityNotExistsError' if the taskToken is not valid
  // anymore due to activity timeout.
  // 
  // 
  // Parameters:
  //  - FailRequest
  RespondActivityTaskFailed(failRequest *shared.RespondActivityTaskFailedRequest) (err error)
  // RespondActivityTaskCanceled is called by application worker when it is successfully canceled an ActivityTask.  It will
  // result in a new 'ActivityTaskCanceled' event being written to the workflow history and a new DecisionTask
  // created for the workflow instance so new decisions could be made.  Use the 'taskToken' provided as response of
  // PollForActivityTask API call for completion. It fails with 'EntityNotExistsError' if the taskToken is not valid
  // anymore due to activity timeout.
  // 
  // 
  // Parameters:
  //  - CanceledRequest
  RespondActivityTaskCanceled(canceledRequest *shared.RespondActivityTaskCanceledRequest) (err error)
  // RequestCancelWorkflowExecution is called by application worker when it wants to request cancellation of a workflow instance.
  // It will result in a new 'WorkflowExecutionCancelRequested' event being written to the workflow history and a new DecisionTask
  // created for the workflow instance so new decisions could be made. It fails with 'EntityNotExistsError' if the workflow is not valid
  // anymore due to completion or doesn't exist.
  // 
  // 
  // Parameters:
  //  - CancelRequest
  RequestCancelWorkflowExecution(cancelRequest *shared.RequestCancelWorkflowExecutionRequest) (err error)
  // SignalWorkflowExecution is used to send a signal event to running workflow execution.  This results in
  // WorkflowExecutionSignaled event recorded in the history and a decision task being created for the execution.
  // 
  // 
  // Parameters:
  //  - SignalRequest
  SignalWorkflowExecution(signalRequest *shared.SignalWorkflowExecutionRequest) (err error)
  // TerminateWorkflowExecution terminates an existing workflow execution by recording WorkflowExecutionTerminated event
  // in the history and immediately terminating the execution instance.
  // 
  // 
  // Parameters:
  //  - TerminateRequest
  TerminateWorkflowExecution(terminateRequest *shared.TerminateWorkflowExecutionRequest) (err error)
  // ListOpenWorkflowExecutions is a visibility API to list the open executions in a specific domain.
  // 
  // 
  // Parameters:
  //  - ListRequest
  ListOpenWorkflowExecutions(listRequest *shared.ListOpenWorkflowExecutionsRequest) (r *shared.ListOpenWorkflowExecutionsResponse, err error)
  // ListClosedWorkflowExecutions is a visibility API to list the closed executions in a specific domain.
  // 
  // 
  // Parameters:
  //  - ListRequest
  ListClosedWorkflowExecutions(listRequest *shared.ListClosedWorkflowExecutionsRequest) (r *shared.ListClosedWorkflowExecutionsResponse, err error)
}

//WorkflowService API is exposed to provide support for long running applications.  Application is expected to call
//StartWorkflowExecution to create an instance for each instance of long running workflow.  Such applications are expected
//to have a worker which regularly polls for DecisionTask and ActivityTask from the WorkflowService.  For each
//DecisionTask, application is expected to process the history of events for that session and respond back with next
//decisions.  For each ActivityTask, application is expected to execute the actual logic for that task and respond back
//with completion or failure.  Worker is expected to regularly heartbeat while activity task is running.
//
type WorkflowServiceClient struct {
  Transport thrift.TTransport
  ProtocolFactory thrift.TProtocolFactory
  InputProtocol thrift.TProtocol
  OutputProtocol thrift.TProtocol
  SeqId int32
}

func NewWorkflowServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *WorkflowServiceClient {
  return &WorkflowServiceClient{Transport: t,
    ProtocolFactory: f,
    InputProtocol: f.GetProtocol(t),
    OutputProtocol: f.GetProtocol(t),
    SeqId: 0,
  }
}

func NewWorkflowServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *WorkflowServiceClient {
  return &WorkflowServiceClient{Transport: t,
    ProtocolFactory: nil,
    InputProtocol: iprot,
    OutputProtocol: oprot,
    SeqId: 0,
  }
}

// RegisterDomain creates a new domain which can be used as a container for all resources.  Domain is a top level
// entity within Cadence, used as a container for all resources like workflow executions, tasklists, etc.  Domain
// acts as a sandbox and provides isolation for all resources within the domain.  All resources belongs to exactly one
// domain.
// 
// 
// Parameters:
//  - RegisterRequest
func (p *WorkflowServiceClient) RegisterDomain(registerRequest *shared.RegisterDomainRequest) (err error) {
  if err = p.sendRegisterDomain(registerRequest); err != nil { return }
  return p.recvRegisterDomain()
}

func (p *WorkflowServiceClient) sendRegisterDomain(registerRequest *shared.RegisterDomainRequest)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("RegisterDomain", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := WorkflowServiceRegisterDomainArgs{
  RegisterRequest : registerRequest,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *WorkflowServiceClient) recvRegisterDomain() (err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "RegisterDomain" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "RegisterDomain failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "RegisterDomain failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error0 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error1 error
    error1, err = error0.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error1
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "RegisterDomain failed: invalid message type")
    return
  }
  result := WorkflowServiceRegisterDomainResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.BadRequestError != nil {
    err = result.BadRequestError
    return 
  } else   if result.InternalServiceError != nil {
    err = result.InternalServiceError
    return 
  } else   if result.DomainExistsError != nil {
    err = result.DomainExistsError
    return 
  }
  return
}

// DescribeDomain returns the information and configuration for a registered domain.
// 
// 
// Parameters:
//  - DescribeRequest
func (p *WorkflowServiceClient) DescribeDomain(describeRequest *shared.DescribeDomainRequest) (r *shared.DescribeDomainResponse, err error) {
  if err = p.sendDescribeDomain(describeRequest); err != nil { return }
  return p.recvDescribeDomain()
}

func (p *WorkflowServiceClient) sendDescribeDomain(describeRequest *shared.DescribeDomainRequest)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("DescribeDomain", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := WorkflowServiceDescribeDomainArgs{
  DescribeRequest : describeRequest,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *WorkflowServiceClient) recvDescribeDomain() (value *shared.DescribeDomainResponse, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "DescribeDomain" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "DescribeDomain failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "DescribeDomain failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error2 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error3 error
    error3, err = error2.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error3
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "DescribeDomain failed: invalid message type")
    return
  }
  result := WorkflowServiceDescribeDomainResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.BadRequestError != nil {
    err = result.BadRequestError
    return 
  } else   if result.InternalServiceError != nil {
    err = result.InternalServiceError
    return 
  } else   if result.EntityNotExistError != nil {
    err = result.EntityNotExistError
    return 
  }
  value = result.GetSuccess()
  return
}

// UpdateDomain is used to update the information and configuration for a registered domain.
// 
// 
// Parameters:
//  - UpdateRequest
func (p *WorkflowServiceClient) UpdateDomain(updateRequest *shared.UpdateDomainRequest) (r *shared.UpdateDomainResponse, err error) {
  if err = p.sendUpdateDomain(updateRequest); err != nil { return }
  return p.recvUpdateDomain()
}

func (p *WorkflowServiceClient) sendUpdateDomain(updateRequest *shared.UpdateDomainRequest)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("UpdateDomain", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := WorkflowServiceUpdateDomainArgs{
  UpdateRequest : updateRequest,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *WorkflowServiceClient) recvUpdateDomain() (value *shared.UpdateDomainResponse, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "UpdateDomain" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "UpdateDomain failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "UpdateDomain failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error4 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error5 error
    error5, err = error4.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error5
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "UpdateDomain failed: invalid message type")
    return
  }
  result := WorkflowServiceUpdateDomainResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.BadRequestError != nil {
    err = result.BadRequestError
    return 
  } else   if result.InternalServiceError != nil {
    err = result.InternalServiceError
    return 
  } else   if result.EntityNotExistError != nil {
    err = result.EntityNotExistError
    return 
  }
  value = result.GetSuccess()
  return
}

// DeprecateDomain us used to update status of a registered domain to DEPRECATED.  Once the domain is deprecated
// it cannot be used to start new workflow executions.  Existing workflow executions will continue to run on
// deprecated domains.
// 
// 
// Parameters:
//  - DeprecateRequest
func (p *WorkflowServiceClient) DeprecateDomain(deprecateRequest *shared.DeprecateDomainRequest) (err error) {
  if err = p.sendDeprecateDomain(deprecateRequest); err != nil { return }
  return p.recvDeprecateDomain()
}

func (p *WorkflowServiceClient) sendDeprecateDomain(deprecateRequest *shared.DeprecateDomainRequest)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("DeprecateDomain", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := WorkflowServiceDeprecateDomainArgs{
  DeprecateRequest : deprecateRequest,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *WorkflowServiceClient) recvDeprecateDomain() (err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "DeprecateDomain" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "DeprecateDomain failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "DeprecateDomain failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error6 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error7 error
    error7, err = error6.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error7
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "DeprecateDomain failed: invalid message type")
    return
  }
  result := WorkflowServiceDeprecateDomainResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.BadRequestError != nil {
    err = result.BadRequestError
    return 
  } else   if result.InternalServiceError != nil {
    err = result.InternalServiceError
    return 
  } else   if result.EntityNotExistError != nil {
    err = result.EntityNotExistError
    return 
  }
  return
}

// StartWorkflowExecution starts a new long running workflow instance.  It will create the instance with
// 'WorkflowExecutionStarted' event in history and also schedule the first DecisionTask for the worker to make the
// first decision for this instance.  It will return 'WorkflowExecutionAlreadyStartedError', if an instance already
// exists with same workflowId.
// 
// 
// Parameters:
//  - StartRequest
func (p *WorkflowServiceClient) StartWorkflowExecution(startRequest *shared.StartWorkflowExecutionRequest) (r *shared.StartWorkflowExecutionResponse, err error) {
  if err = p.sendStartWorkflowExecution(startRequest); err != nil { return }
  return p.recvStartWorkflowExecution()
}

func (p *WorkflowServiceClient) sendStartWorkflowExecution(startRequest *shared.StartWorkflowExecutionRequest)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("StartWorkflowExecution", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := WorkflowServiceStartWorkflowExecutionArgs{
  StartRequest : startRequest,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *WorkflowServiceClient) recvStartWorkflowExecution() (value *shared.StartWorkflowExecutionResponse, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "StartWorkflowExecution" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "StartWorkflowExecution failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "StartWorkflowExecution failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error8 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error9 error
    error9, err = error8.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error9
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "StartWorkflowExecution failed: invalid message type")
    return
  }
  result := WorkflowServiceStartWorkflowExecutionResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.BadRequestError != nil {
    err = result.BadRequestError
    return 
  } else   if result.InternalServiceError != nil {
    err = result.InternalServiceError
    return 
  } else   if result.SessionAlreadyExistError != nil {
    err = result.SessionAlreadyExistError
    return 
  }
  value = result.GetSuccess()
  return
}

// Returns the history of specified workflow execution.  It fails with 'EntityNotExistError' if speficied workflow
// execution in unknown to the service.
// 
// 
// Parameters:
//  - GetRequest
func (p *WorkflowServiceClient) GetWorkflowExecutionHistory(getRequest *shared.GetWorkflowExecutionHistoryRequest) (r *shared.GetWorkflowExecutionHistoryResponse, err error) {
  if err = p.sendGetWorkflowExecutionHistory(getRequest); err != nil { return }
  return p.recvGetWorkflowExecutionHistory()
}

func (p *WorkflowServiceClient) sendGetWorkflowExecutionHistory(getRequest *shared.GetWorkflowExecutionHistoryRequest)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("GetWorkflowExecutionHistory", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := WorkflowServiceGetWorkflowExecutionHistoryArgs{
  GetRequest : getRequest,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *WorkflowServiceClient) recvGetWorkflowExecutionHistory() (value *shared.GetWorkflowExecutionHistoryResponse, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "GetWorkflowExecutionHistory" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "GetWorkflowExecutionHistory failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "GetWorkflowExecutionHistory failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error10 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error11 error
    error11, err = error10.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error11
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "GetWorkflowExecutionHistory failed: invalid message type")
    return
  }
  result := WorkflowServiceGetWorkflowExecutionHistoryResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.BadRequestError != nil {
    err = result.BadRequestError
    return 
  } else   if result.InternalServiceError != nil {
    err = result.InternalServiceError
    return 
  } else   if result.EntityNotExistError != nil {
    err = result.EntityNotExistError
    return 
  }
  value = result.GetSuccess()
  return
}

// PollForDecisionTask is called by application worker to process DecisionTask from a specific taskList.  A
// DecisionTask is dispatched to callers for active workflow executions, with pending decisions.
// Application is then expected to call 'RespondDecisionTaskCompleted' API when it is done processing the DecisionTask.
// It will also create a 'DecisionTaskStarted' event in the history for that session before handing off DecisionTask to
// application worker.
// 
// 
// Parameters:
//  - PollRequest
func (p *WorkflowServiceClient) PollForDecisionTask(pollRequest *shared.PollForDecisionTaskRequest) (r *shared.PollForDecisionTaskResponse, err error) {
  if err = p.sendPollForDecisionTask(pollRequest); err != nil { return }
  return p.recvPollForDecisionTask()
}

func (p *WorkflowServiceClient) sendPollForDecisionTask(pollRequest *shared.PollForDecisionTaskRequest)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("PollForDecisionTask", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := WorkflowServicePollForDecisionTaskArgs{
  PollRequest : pollRequest,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *WorkflowServiceClient) recvPollForDecisionTask() (value *shared.PollForDecisionTaskResponse, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "PollForDecisionTask" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "PollForDecisionTask failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "PollForDecisionTask failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error12 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error13 error
    error13, err = error12.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error13
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "PollForDecisionTask failed: invalid message type")
    return
  }
  result := WorkflowServicePollForDecisionTaskResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.BadRequestError != nil {
    err = result.BadRequestError
    return 
  } else   if result.InternalServiceError != nil {
    err = result.InternalServiceError
    return 
  }
  value = result.GetSuccess()
  return
}

// RespondDecisionTaskCompleted is called by application worker to complete a DecisionTask handed as a result of
// 'PollForDecisionTask' API call.  Completing a DecisionTask will result in new events for the workflow execution and
// potentially new ActivityTask being created for corresponding decisions.  It will also create a DecisionTaskCompleted
// event in the history for that session.  Use the 'taskToken' provided as response of PollForDecisionTask API call
// for completing the DecisionTask.
// 
// 
// Parameters:
//  - CompleteRequest
func (p *WorkflowServiceClient) RespondDecisionTaskCompleted(completeRequest *shared.RespondDecisionTaskCompletedRequest) (err error) {
  if err = p.sendRespondDecisionTaskCompleted(completeRequest); err != nil { return }
  return p.recvRespondDecisionTaskCompleted()
}

func (p *WorkflowServiceClient) sendRespondDecisionTaskCompleted(completeRequest *shared.RespondDecisionTaskCompletedRequest)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("RespondDecisionTaskCompleted", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := WorkflowServiceRespondDecisionTaskCompletedArgs{
  CompleteRequest : completeRequest,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *WorkflowServiceClient) recvRespondDecisionTaskCompleted() (err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "RespondDecisionTaskCompleted" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "RespondDecisionTaskCompleted failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "RespondDecisionTaskCompleted failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error14 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error15 error
    error15, err = error14.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error15
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "RespondDecisionTaskCompleted failed: invalid message type")
    return
  }
  result := WorkflowServiceRespondDecisionTaskCompletedResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.BadRequestError != nil {
    err = result.BadRequestError
    return 
  } else   if result.InternalServiceError != nil {
    err = result.InternalServiceError
    return 
  } else   if result.EntityNotExistError != nil {
    err = result.EntityNotExistError
    return 
  }
  return
}

// PollForActivityTask is called by application worker to process ActivityTask from a specific taskList.  ActivityTask
// is dispatched to callers whenever a ScheduleTask decision is made for a workflow execution.
// Application is expected to call 'RespondActivityTaskCompleted' or 'RespondActivityTaskFailed' once it is done
// processing the task.
// Application also needs to call 'RecordActivityTaskHeartbeat' API within 'heartbeatTimeoutSeconds' interval to
// prevent the task from getting timed out.  An event 'ActivityTaskStarted' event is also written to workflow execution
// history before the ActivityTask is dispatched to application worker.
// 
// 
// Parameters:
//  - PollRequest
func (p *WorkflowServiceClient) PollForActivityTask(pollRequest *shared.PollForActivityTaskRequest) (r *shared.PollForActivityTaskResponse, err error) {
  if err = p.sendPollForActivityTask(pollRequest); err != nil { return }
  return p.recvPollForActivityTask()
}

func (p *WorkflowServiceClient) sendPollForActivityTask(pollRequest *shared.PollForActivityTaskRequest)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("PollForActivityTask", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := WorkflowServicePollForActivityTaskArgs{
  PollRequest : pollRequest,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *WorkflowServiceClient) recvPollForActivityTask() (value *shared.PollForActivityTaskResponse, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "PollForActivityTask" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "PollForActivityTask failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "PollForActivityTask failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error16 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error17 error
    error17, err = error16.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error17
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "PollForActivityTask failed: invalid message type")
    return
  }
  result := WorkflowServicePollForActivityTaskResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.BadRequestError != nil {
    err = result.BadRequestError
    return 
  } else   if result.InternalServiceError != nil {
    err = result.InternalServiceError
    return 
  }
  value = result.GetSuccess()
  return
}

// RecordActivityTaskHeartbeat is called by application worker while it is processing an ActivityTask.  If worker fails
// to heartbeat within 'heartbeatTimeoutSeconds' interval for the ActivityTask, then it will be marked as timedout and
// 'ActivityTaskTimedOut' event will be written to the workflow history.  Calling 'RecordActivityTaskHeartbeat' will
// fail with 'EntityNotExistsError' in such situations.  Use the 'taskToken' provided as response of
// PollForActivityTask API call for heartbeating.
// 
// 
// Parameters:
//  - HeartbeatRequest
func (p *WorkflowServiceClient) RecordActivityTaskHeartbeat(heartbeatRequest *shared.RecordActivityTaskHeartbeatRequest) (r *shared.RecordActivityTaskHeartbeatResponse, err error) {
  if err = p.sendRecordActivityTaskHeartbeat(heartbeatRequest); err != nil { return }
  return p.recvRecordActivityTaskHeartbeat()
}

func (p *WorkflowServiceClient) sendRecordActivityTaskHeartbeat(heartbeatRequest *shared.RecordActivityTaskHeartbeatRequest)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("RecordActivityTaskHeartbeat", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := WorkflowServiceRecordActivityTaskHeartbeatArgs{
  HeartbeatRequest : heartbeatRequest,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *WorkflowServiceClient) recvRecordActivityTaskHeartbeat() (value *shared.RecordActivityTaskHeartbeatResponse, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "RecordActivityTaskHeartbeat" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "RecordActivityTaskHeartbeat failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "RecordActivityTaskHeartbeat failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error18 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error19 error
    error19, err = error18.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error19
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "RecordActivityTaskHeartbeat failed: invalid message type")
    return
  }
  result := WorkflowServiceRecordActivityTaskHeartbeatResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.BadRequestError != nil {
    err = result.BadRequestError
    return 
  } else   if result.InternalServiceError != nil {
    err = result.InternalServiceError
    return 
  } else   if result.EntityNotExistError != nil {
    err = result.EntityNotExistError
    return 
  }
  value = result.GetSuccess()
  return
}

// RespondActivityTaskCompleted is called by application worker when it is done processing an ActivityTask.  It will
// result in a new 'ActivityTaskCompleted' event being written to the workflow history and a new DecisionTask
// created for the workflow so new decisions could be made.  Use the 'taskToken' provided as response of
// PollForActivityTask API call for completion. It fails with 'EntityNotExistsError' if the taskToken is not valid
// anymore due to activity timeout.
// 
// 
// Parameters:
//  - CompleteRequest
func (p *WorkflowServiceClient) RespondActivityTaskCompleted(completeRequest *shared.RespondActivityTaskCompletedRequest) (err error) {
  if err = p.sendRespondActivityTaskCompleted(completeRequest); err != nil { return }
  return p.recvRespondActivityTaskCompleted()
}

func (p *WorkflowServiceClient) sendRespondActivityTaskCompleted(completeRequest *shared.RespondActivityTaskCompletedRequest)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("RespondActivityTaskCompleted", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := WorkflowServiceRespondActivityTaskCompletedArgs{
  CompleteRequest : completeRequest,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *WorkflowServiceClient) recvRespondActivityTaskCompleted() (err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "RespondActivityTaskCompleted" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "RespondActivityTaskCompleted failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "RespondActivityTaskCompleted failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error20 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error21 error
    error21, err = error20.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error21
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "RespondActivityTaskCompleted failed: invalid message type")
    return
  }
  result := WorkflowServiceRespondActivityTaskCompletedResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.BadRequestError != nil {
    err = result.BadRequestError
    return 
  } else   if result.InternalServiceError != nil {
    err = result.InternalServiceError
    return 
  } else   if result.EntityNotExistError != nil {
    err = result.EntityNotExistError
    return 
  }
  return
}

// RespondActivityTaskFailed is called by application worker when it is done processing an ActivityTask.  It will
// result in a new 'ActivityTaskFailed' event being written to the workflow history and a new DecisionTask
// created for the workflow instance so new decisions could be made.  Use the 'taskToken' provided as response of
// PollForActivityTask API call for completion. It fails with 'EntityNotExistsError' if the taskToken is not valid
// anymore due to activity timeout.
// 
// 
// Parameters:
//  - FailRequest
func (p *WorkflowServiceClient) RespondActivityTaskFailed(failRequest *shared.RespondActivityTaskFailedRequest) (err error) {
  if err = p.sendRespondActivityTaskFailed(failRequest); err != nil { return }
  return p.recvRespondActivityTaskFailed()
}

func (p *WorkflowServiceClient) sendRespondActivityTaskFailed(failRequest *shared.RespondActivityTaskFailedRequest)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("RespondActivityTaskFailed", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := WorkflowServiceRespondActivityTaskFailedArgs{
  FailRequest : failRequest,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *WorkflowServiceClient) recvRespondActivityTaskFailed() (err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "RespondActivityTaskFailed" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "RespondActivityTaskFailed failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "RespondActivityTaskFailed failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error22 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error23 error
    error23, err = error22.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error23
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "RespondActivityTaskFailed failed: invalid message type")
    return
  }
  result := WorkflowServiceRespondActivityTaskFailedResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.BadRequestError != nil {
    err = result.BadRequestError
    return 
  } else   if result.InternalServiceError != nil {
    err = result.InternalServiceError
    return 
  } else   if result.EntityNotExistError != nil {
    err = result.EntityNotExistError
    return 
  }
  return
}

// RespondActivityTaskCanceled is called by application worker when it is successfully canceled an ActivityTask.  It will
// result in a new 'ActivityTaskCanceled' event being written to the workflow history and a new DecisionTask
// created for the workflow instance so new decisions could be made.  Use the 'taskToken' provided as response of
// PollForActivityTask API call for completion. It fails with 'EntityNotExistsError' if the taskToken is not valid
// anymore due to activity timeout.
// 
// 
// Parameters:
//  - CanceledRequest
func (p *WorkflowServiceClient) RespondActivityTaskCanceled(canceledRequest *shared.RespondActivityTaskCanceledRequest) (err error) {
  if err = p.sendRespondActivityTaskCanceled(canceledRequest); err != nil { return }
  return p.recvRespondActivityTaskCanceled()
}

func (p *WorkflowServiceClient) sendRespondActivityTaskCanceled(canceledRequest *shared.RespondActivityTaskCanceledRequest)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("RespondActivityTaskCanceled", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := WorkflowServiceRespondActivityTaskCanceledArgs{
  CanceledRequest : canceledRequest,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *WorkflowServiceClient) recvRespondActivityTaskCanceled() (err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "RespondActivityTaskCanceled" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "RespondActivityTaskCanceled failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "RespondActivityTaskCanceled failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error24 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error25 error
    error25, err = error24.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error25
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "RespondActivityTaskCanceled failed: invalid message type")
    return
  }
  result := WorkflowServiceRespondActivityTaskCanceledResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.BadRequestError != nil {
    err = result.BadRequestError
    return 
  } else   if result.InternalServiceError != nil {
    err = result.InternalServiceError
    return 
  } else   if result.EntityNotExistError != nil {
    err = result.EntityNotExistError
    return 
  }
  return
}

// RequestCancelWorkflowExecution is called by application worker when it wants to request cancellation of a workflow instance.
// It will result in a new 'WorkflowExecutionCancelRequested' event being written to the workflow history and a new DecisionTask
// created for the workflow instance so new decisions could be made. It fails with 'EntityNotExistsError' if the workflow is not valid
// anymore due to completion or doesn't exist.
// 
// 
// Parameters:
//  - CancelRequest
func (p *WorkflowServiceClient) RequestCancelWorkflowExecution(cancelRequest *shared.RequestCancelWorkflowExecutionRequest) (err error) {
  if err = p.sendRequestCancelWorkflowExecution(cancelRequest); err != nil { return }
  return p.recvRequestCancelWorkflowExecution()
}

func (p *WorkflowServiceClient) sendRequestCancelWorkflowExecution(cancelRequest *shared.RequestCancelWorkflowExecutionRequest)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("RequestCancelWorkflowExecution", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := WorkflowServiceRequestCancelWorkflowExecutionArgs{
  CancelRequest : cancelRequest,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *WorkflowServiceClient) recvRequestCancelWorkflowExecution() (err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "RequestCancelWorkflowExecution" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "RequestCancelWorkflowExecution failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "RequestCancelWorkflowExecution failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error26 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error27 error
    error27, err = error26.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error27
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "RequestCancelWorkflowExecution failed: invalid message type")
    return
  }
  result := WorkflowServiceRequestCancelWorkflowExecutionResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.BadRequestError != nil {
    err = result.BadRequestError
    return 
  } else   if result.InternalServiceError != nil {
    err = result.InternalServiceError
    return 
  } else   if result.EntityNotExistError != nil {
    err = result.EntityNotExistError
    return 
  }
  return
}

// SignalWorkflowExecution is used to send a signal event to running workflow execution.  This results in
// WorkflowExecutionSignaled event recorded in the history and a decision task being created for the execution.
// 
// 
// Parameters:
//  - SignalRequest
func (p *WorkflowServiceClient) SignalWorkflowExecution(signalRequest *shared.SignalWorkflowExecutionRequest) (err error) {
  if err = p.sendSignalWorkflowExecution(signalRequest); err != nil { return }
  return p.recvSignalWorkflowExecution()
}

func (p *WorkflowServiceClient) sendSignalWorkflowExecution(signalRequest *shared.SignalWorkflowExecutionRequest)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("SignalWorkflowExecution", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := WorkflowServiceSignalWorkflowExecutionArgs{
  SignalRequest : signalRequest,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *WorkflowServiceClient) recvSignalWorkflowExecution() (err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "SignalWorkflowExecution" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "SignalWorkflowExecution failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "SignalWorkflowExecution failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error28 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error29 error
    error29, err = error28.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error29
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "SignalWorkflowExecution failed: invalid message type")
    return
  }
  result := WorkflowServiceSignalWorkflowExecutionResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.BadRequestError != nil {
    err = result.BadRequestError
    return 
  } else   if result.InternalServiceError != nil {
    err = result.InternalServiceError
    return 
  } else   if result.EntityNotExistError != nil {
    err = result.EntityNotExistError
    return 
  }
  return
}

// TerminateWorkflowExecution terminates an existing workflow execution by recording WorkflowExecutionTerminated event
// in the history and immediately terminating the execution instance.
// 
// 
// Parameters:
//  - TerminateRequest
func (p *WorkflowServiceClient) TerminateWorkflowExecution(terminateRequest *shared.TerminateWorkflowExecutionRequest) (err error) {
  if err = p.sendTerminateWorkflowExecution(terminateRequest); err != nil { return }
  return p.recvTerminateWorkflowExecution()
}

func (p *WorkflowServiceClient) sendTerminateWorkflowExecution(terminateRequest *shared.TerminateWorkflowExecutionRequest)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("TerminateWorkflowExecution", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := WorkflowServiceTerminateWorkflowExecutionArgs{
  TerminateRequest : terminateRequest,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *WorkflowServiceClient) recvTerminateWorkflowExecution() (err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "TerminateWorkflowExecution" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "TerminateWorkflowExecution failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "TerminateWorkflowExecution failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error30 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error31 error
    error31, err = error30.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error31
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "TerminateWorkflowExecution failed: invalid message type")
    return
  }
  result := WorkflowServiceTerminateWorkflowExecutionResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.BadRequestError != nil {
    err = result.BadRequestError
    return 
  } else   if result.InternalServiceError != nil {
    err = result.InternalServiceError
    return 
  } else   if result.EntityNotExistError != nil {
    err = result.EntityNotExistError
    return 
  }
  return
}

// ListOpenWorkflowExecutions is a visibility API to list the open executions in a specific domain.
// 
// 
// Parameters:
//  - ListRequest
func (p *WorkflowServiceClient) ListOpenWorkflowExecutions(listRequest *shared.ListOpenWorkflowExecutionsRequest) (r *shared.ListOpenWorkflowExecutionsResponse, err error) {
  if err = p.sendListOpenWorkflowExecutions(listRequest); err != nil { return }
  return p.recvListOpenWorkflowExecutions()
}

func (p *WorkflowServiceClient) sendListOpenWorkflowExecutions(listRequest *shared.ListOpenWorkflowExecutionsRequest)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("ListOpenWorkflowExecutions", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := WorkflowServiceListOpenWorkflowExecutionsArgs{
  ListRequest : listRequest,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *WorkflowServiceClient) recvListOpenWorkflowExecutions() (value *shared.ListOpenWorkflowExecutionsResponse, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "ListOpenWorkflowExecutions" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "ListOpenWorkflowExecutions failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ListOpenWorkflowExecutions failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error32 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error33 error
    error33, err = error32.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error33
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "ListOpenWorkflowExecutions failed: invalid message type")
    return
  }
  result := WorkflowServiceListOpenWorkflowExecutionsResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.BadRequestError != nil {
    err = result.BadRequestError
    return 
  } else   if result.InternalServiceError != nil {
    err = result.InternalServiceError
    return 
  } else   if result.EntityNotExistError != nil {
    err = result.EntityNotExistError
    return 
  }
  value = result.GetSuccess()
  return
}

// ListClosedWorkflowExecutions is a visibility API to list the closed executions in a specific domain.
// 
// 
// Parameters:
//  - ListRequest
func (p *WorkflowServiceClient) ListClosedWorkflowExecutions(listRequest *shared.ListClosedWorkflowExecutionsRequest) (r *shared.ListClosedWorkflowExecutionsResponse, err error) {
  if err = p.sendListClosedWorkflowExecutions(listRequest); err != nil { return }
  return p.recvListClosedWorkflowExecutions()
}

func (p *WorkflowServiceClient) sendListClosedWorkflowExecutions(listRequest *shared.ListClosedWorkflowExecutionsRequest)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("ListClosedWorkflowExecutions", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := WorkflowServiceListClosedWorkflowExecutionsArgs{
  ListRequest : listRequest,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *WorkflowServiceClient) recvListClosedWorkflowExecutions() (value *shared.ListClosedWorkflowExecutionsResponse, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "ListClosedWorkflowExecutions" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "ListClosedWorkflowExecutions failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ListClosedWorkflowExecutions failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error34 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error35 error
    error35, err = error34.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error35
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "ListClosedWorkflowExecutions failed: invalid message type")
    return
  }
  result := WorkflowServiceListClosedWorkflowExecutionsResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.BadRequestError != nil {
    err = result.BadRequestError
    return 
  } else   if result.InternalServiceError != nil {
    err = result.InternalServiceError
    return 
  } else   if result.EntityNotExistError != nil {
    err = result.EntityNotExistError
    return 
  }
  value = result.GetSuccess()
  return
}


type WorkflowServiceProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler WorkflowService
}

func (p *WorkflowServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *WorkflowServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *WorkflowServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewWorkflowServiceProcessor(handler WorkflowService) *WorkflowServiceProcessor {

  self36 := &WorkflowServiceProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self36.processorMap["RegisterDomain"] = &workflowServiceProcessorRegisterDomain{handler:handler}
  self36.processorMap["DescribeDomain"] = &workflowServiceProcessorDescribeDomain{handler:handler}
  self36.processorMap["UpdateDomain"] = &workflowServiceProcessorUpdateDomain{handler:handler}
  self36.processorMap["DeprecateDomain"] = &workflowServiceProcessorDeprecateDomain{handler:handler}
  self36.processorMap["StartWorkflowExecution"] = &workflowServiceProcessorStartWorkflowExecution{handler:handler}
  self36.processorMap["GetWorkflowExecutionHistory"] = &workflowServiceProcessorGetWorkflowExecutionHistory{handler:handler}
  self36.processorMap["PollForDecisionTask"] = &workflowServiceProcessorPollForDecisionTask{handler:handler}
  self36.processorMap["RespondDecisionTaskCompleted"] = &workflowServiceProcessorRespondDecisionTaskCompleted{handler:handler}
  self36.processorMap["PollForActivityTask"] = &workflowServiceProcessorPollForActivityTask{handler:handler}
  self36.processorMap["RecordActivityTaskHeartbeat"] = &workflowServiceProcessorRecordActivityTaskHeartbeat{handler:handler}
  self36.processorMap["RespondActivityTaskCompleted"] = &workflowServiceProcessorRespondActivityTaskCompleted{handler:handler}
  self36.processorMap["RespondActivityTaskFailed"] = &workflowServiceProcessorRespondActivityTaskFailed{handler:handler}
  self36.processorMap["RespondActivityTaskCanceled"] = &workflowServiceProcessorRespondActivityTaskCanceled{handler:handler}
  self36.processorMap["RequestCancelWorkflowExecution"] = &workflowServiceProcessorRequestCancelWorkflowExecution{handler:handler}
  self36.processorMap["SignalWorkflowExecution"] = &workflowServiceProcessorSignalWorkflowExecution{handler:handler}
  self36.processorMap["TerminateWorkflowExecution"] = &workflowServiceProcessorTerminateWorkflowExecution{handler:handler}
  self36.processorMap["ListOpenWorkflowExecutions"] = &workflowServiceProcessorListOpenWorkflowExecutions{handler:handler}
  self36.processorMap["ListClosedWorkflowExecutions"] = &workflowServiceProcessorListClosedWorkflowExecutions{handler:handler}
return self36
}

func (p *WorkflowServiceProcessor) Process(iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err := iprot.ReadMessageBegin()
  if err != nil { return false, err }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(seqId, iprot, oprot)
  }
  iprot.Skip(thrift.STRUCT)
  iprot.ReadMessageEnd()
  x37 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
  x37.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush()
  return false, x37

}

type workflowServiceProcessorRegisterDomain struct {
  handler WorkflowService
}

func (p *workflowServiceProcessorRegisterDomain) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := WorkflowServiceRegisterDomainArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("RegisterDomain", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := WorkflowServiceRegisterDomainResult{}
  var err2 error
  if err2 = p.handler.RegisterDomain(args.RegisterRequest); err2 != nil {
  switch v := err2.(type) {
    case *shared.BadRequestError:
  result.BadRequestError = v
    case *shared.InternalServiceError:
  result.InternalServiceError = v
    case *shared.DomainAlreadyExistsError:
  result.DomainExistsError = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing RegisterDomain: " + err2.Error())
    oprot.WriteMessageBegin("RegisterDomain", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("RegisterDomain", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type workflowServiceProcessorDescribeDomain struct {
  handler WorkflowService
}

func (p *workflowServiceProcessorDescribeDomain) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := WorkflowServiceDescribeDomainArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("DescribeDomain", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := WorkflowServiceDescribeDomainResult{}
var retval *shared.DescribeDomainResponse
  var err2 error
  if retval, err2 = p.handler.DescribeDomain(args.DescribeRequest); err2 != nil {
  switch v := err2.(type) {
    case *shared.BadRequestError:
  result.BadRequestError = v
    case *shared.InternalServiceError:
  result.InternalServiceError = v
    case *shared.EntityNotExistsError:
  result.EntityNotExistError = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing DescribeDomain: " + err2.Error())
    oprot.WriteMessageBegin("DescribeDomain", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("DescribeDomain", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type workflowServiceProcessorUpdateDomain struct {
  handler WorkflowService
}

func (p *workflowServiceProcessorUpdateDomain) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := WorkflowServiceUpdateDomainArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("UpdateDomain", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := WorkflowServiceUpdateDomainResult{}
var retval *shared.UpdateDomainResponse
  var err2 error
  if retval, err2 = p.handler.UpdateDomain(args.UpdateRequest); err2 != nil {
  switch v := err2.(type) {
    case *shared.BadRequestError:
  result.BadRequestError = v
    case *shared.InternalServiceError:
  result.InternalServiceError = v
    case *shared.EntityNotExistsError:
  result.EntityNotExistError = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing UpdateDomain: " + err2.Error())
    oprot.WriteMessageBegin("UpdateDomain", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("UpdateDomain", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type workflowServiceProcessorDeprecateDomain struct {
  handler WorkflowService
}

func (p *workflowServiceProcessorDeprecateDomain) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := WorkflowServiceDeprecateDomainArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("DeprecateDomain", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := WorkflowServiceDeprecateDomainResult{}
  var err2 error
  if err2 = p.handler.DeprecateDomain(args.DeprecateRequest); err2 != nil {
  switch v := err2.(type) {
    case *shared.BadRequestError:
  result.BadRequestError = v
    case *shared.InternalServiceError:
  result.InternalServiceError = v
    case *shared.EntityNotExistsError:
  result.EntityNotExistError = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing DeprecateDomain: " + err2.Error())
    oprot.WriteMessageBegin("DeprecateDomain", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("DeprecateDomain", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type workflowServiceProcessorStartWorkflowExecution struct {
  handler WorkflowService
}

func (p *workflowServiceProcessorStartWorkflowExecution) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := WorkflowServiceStartWorkflowExecutionArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("StartWorkflowExecution", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := WorkflowServiceStartWorkflowExecutionResult{}
var retval *shared.StartWorkflowExecutionResponse
  var err2 error
  if retval, err2 = p.handler.StartWorkflowExecution(args.StartRequest); err2 != nil {
  switch v := err2.(type) {
    case *shared.BadRequestError:
  result.BadRequestError = v
    case *shared.InternalServiceError:
  result.InternalServiceError = v
    case *shared.WorkflowExecutionAlreadyStartedError:
  result.SessionAlreadyExistError = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing StartWorkflowExecution: " + err2.Error())
    oprot.WriteMessageBegin("StartWorkflowExecution", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("StartWorkflowExecution", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type workflowServiceProcessorGetWorkflowExecutionHistory struct {
  handler WorkflowService
}

func (p *workflowServiceProcessorGetWorkflowExecutionHistory) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := WorkflowServiceGetWorkflowExecutionHistoryArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("GetWorkflowExecutionHistory", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := WorkflowServiceGetWorkflowExecutionHistoryResult{}
var retval *shared.GetWorkflowExecutionHistoryResponse
  var err2 error
  if retval, err2 = p.handler.GetWorkflowExecutionHistory(args.GetRequest); err2 != nil {
  switch v := err2.(type) {
    case *shared.BadRequestError:
  result.BadRequestError = v
    case *shared.InternalServiceError:
  result.InternalServiceError = v
    case *shared.EntityNotExistsError:
  result.EntityNotExistError = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetWorkflowExecutionHistory: " + err2.Error())
    oprot.WriteMessageBegin("GetWorkflowExecutionHistory", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("GetWorkflowExecutionHistory", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type workflowServiceProcessorPollForDecisionTask struct {
  handler WorkflowService
}

func (p *workflowServiceProcessorPollForDecisionTask) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := WorkflowServicePollForDecisionTaskArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("PollForDecisionTask", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := WorkflowServicePollForDecisionTaskResult{}
var retval *shared.PollForDecisionTaskResponse
  var err2 error
  if retval, err2 = p.handler.PollForDecisionTask(args.PollRequest); err2 != nil {
  switch v := err2.(type) {
    case *shared.BadRequestError:
  result.BadRequestError = v
    case *shared.InternalServiceError:
  result.InternalServiceError = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing PollForDecisionTask: " + err2.Error())
    oprot.WriteMessageBegin("PollForDecisionTask", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("PollForDecisionTask", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type workflowServiceProcessorRespondDecisionTaskCompleted struct {
  handler WorkflowService
}

func (p *workflowServiceProcessorRespondDecisionTaskCompleted) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := WorkflowServiceRespondDecisionTaskCompletedArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("RespondDecisionTaskCompleted", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := WorkflowServiceRespondDecisionTaskCompletedResult{}
  var err2 error
  if err2 = p.handler.RespondDecisionTaskCompleted(args.CompleteRequest); err2 != nil {
  switch v := err2.(type) {
    case *shared.BadRequestError:
  result.BadRequestError = v
    case *shared.InternalServiceError:
  result.InternalServiceError = v
    case *shared.EntityNotExistsError:
  result.EntityNotExistError = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing RespondDecisionTaskCompleted: " + err2.Error())
    oprot.WriteMessageBegin("RespondDecisionTaskCompleted", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("RespondDecisionTaskCompleted", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type workflowServiceProcessorPollForActivityTask struct {
  handler WorkflowService
}

func (p *workflowServiceProcessorPollForActivityTask) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := WorkflowServicePollForActivityTaskArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("PollForActivityTask", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := WorkflowServicePollForActivityTaskResult{}
var retval *shared.PollForActivityTaskResponse
  var err2 error
  if retval, err2 = p.handler.PollForActivityTask(args.PollRequest); err2 != nil {
  switch v := err2.(type) {
    case *shared.BadRequestError:
  result.BadRequestError = v
    case *shared.InternalServiceError:
  result.InternalServiceError = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing PollForActivityTask: " + err2.Error())
    oprot.WriteMessageBegin("PollForActivityTask", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("PollForActivityTask", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type workflowServiceProcessorRecordActivityTaskHeartbeat struct {
  handler WorkflowService
}

func (p *workflowServiceProcessorRecordActivityTaskHeartbeat) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := WorkflowServiceRecordActivityTaskHeartbeatArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("RecordActivityTaskHeartbeat", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := WorkflowServiceRecordActivityTaskHeartbeatResult{}
var retval *shared.RecordActivityTaskHeartbeatResponse
  var err2 error
  if retval, err2 = p.handler.RecordActivityTaskHeartbeat(args.HeartbeatRequest); err2 != nil {
  switch v := err2.(type) {
    case *shared.BadRequestError:
  result.BadRequestError = v
    case *shared.InternalServiceError:
  result.InternalServiceError = v
    case *shared.EntityNotExistsError:
  result.EntityNotExistError = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing RecordActivityTaskHeartbeat: " + err2.Error())
    oprot.WriteMessageBegin("RecordActivityTaskHeartbeat", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("RecordActivityTaskHeartbeat", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type workflowServiceProcessorRespondActivityTaskCompleted struct {
  handler WorkflowService
}

func (p *workflowServiceProcessorRespondActivityTaskCompleted) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := WorkflowServiceRespondActivityTaskCompletedArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("RespondActivityTaskCompleted", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := WorkflowServiceRespondActivityTaskCompletedResult{}
  var err2 error
  if err2 = p.handler.RespondActivityTaskCompleted(args.CompleteRequest); err2 != nil {
  switch v := err2.(type) {
    case *shared.BadRequestError:
  result.BadRequestError = v
    case *shared.InternalServiceError:
  result.InternalServiceError = v
    case *shared.EntityNotExistsError:
  result.EntityNotExistError = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing RespondActivityTaskCompleted: " + err2.Error())
    oprot.WriteMessageBegin("RespondActivityTaskCompleted", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("RespondActivityTaskCompleted", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type workflowServiceProcessorRespondActivityTaskFailed struct {
  handler WorkflowService
}

func (p *workflowServiceProcessorRespondActivityTaskFailed) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := WorkflowServiceRespondActivityTaskFailedArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("RespondActivityTaskFailed", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := WorkflowServiceRespondActivityTaskFailedResult{}
  var err2 error
  if err2 = p.handler.RespondActivityTaskFailed(args.FailRequest); err2 != nil {
  switch v := err2.(type) {
    case *shared.BadRequestError:
  result.BadRequestError = v
    case *shared.InternalServiceError:
  result.InternalServiceError = v
    case *shared.EntityNotExistsError:
  result.EntityNotExistError = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing RespondActivityTaskFailed: " + err2.Error())
    oprot.WriteMessageBegin("RespondActivityTaskFailed", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("RespondActivityTaskFailed", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type workflowServiceProcessorRespondActivityTaskCanceled struct {
  handler WorkflowService
}

func (p *workflowServiceProcessorRespondActivityTaskCanceled) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := WorkflowServiceRespondActivityTaskCanceledArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("RespondActivityTaskCanceled", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := WorkflowServiceRespondActivityTaskCanceledResult{}
  var err2 error
  if err2 = p.handler.RespondActivityTaskCanceled(args.CanceledRequest); err2 != nil {
  switch v := err2.(type) {
    case *shared.BadRequestError:
  result.BadRequestError = v
    case *shared.InternalServiceError:
  result.InternalServiceError = v
    case *shared.EntityNotExistsError:
  result.EntityNotExistError = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing RespondActivityTaskCanceled: " + err2.Error())
    oprot.WriteMessageBegin("RespondActivityTaskCanceled", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("RespondActivityTaskCanceled", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type workflowServiceProcessorRequestCancelWorkflowExecution struct {
  handler WorkflowService
}

func (p *workflowServiceProcessorRequestCancelWorkflowExecution) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := WorkflowServiceRequestCancelWorkflowExecutionArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("RequestCancelWorkflowExecution", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := WorkflowServiceRequestCancelWorkflowExecutionResult{}
  var err2 error
  if err2 = p.handler.RequestCancelWorkflowExecution(args.CancelRequest); err2 != nil {
  switch v := err2.(type) {
    case *shared.BadRequestError:
  result.BadRequestError = v
    case *shared.InternalServiceError:
  result.InternalServiceError = v
    case *shared.EntityNotExistsError:
  result.EntityNotExistError = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing RequestCancelWorkflowExecution: " + err2.Error())
    oprot.WriteMessageBegin("RequestCancelWorkflowExecution", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("RequestCancelWorkflowExecution", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type workflowServiceProcessorSignalWorkflowExecution struct {
  handler WorkflowService
}

func (p *workflowServiceProcessorSignalWorkflowExecution) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := WorkflowServiceSignalWorkflowExecutionArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("SignalWorkflowExecution", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := WorkflowServiceSignalWorkflowExecutionResult{}
  var err2 error
  if err2 = p.handler.SignalWorkflowExecution(args.SignalRequest); err2 != nil {
  switch v := err2.(type) {
    case *shared.BadRequestError:
  result.BadRequestError = v
    case *shared.InternalServiceError:
  result.InternalServiceError = v
    case *shared.EntityNotExistsError:
  result.EntityNotExistError = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing SignalWorkflowExecution: " + err2.Error())
    oprot.WriteMessageBegin("SignalWorkflowExecution", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("SignalWorkflowExecution", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type workflowServiceProcessorTerminateWorkflowExecution struct {
  handler WorkflowService
}

func (p *workflowServiceProcessorTerminateWorkflowExecution) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := WorkflowServiceTerminateWorkflowExecutionArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("TerminateWorkflowExecution", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := WorkflowServiceTerminateWorkflowExecutionResult{}
  var err2 error
  if err2 = p.handler.TerminateWorkflowExecution(args.TerminateRequest); err2 != nil {
  switch v := err2.(type) {
    case *shared.BadRequestError:
  result.BadRequestError = v
    case *shared.InternalServiceError:
  result.InternalServiceError = v
    case *shared.EntityNotExistsError:
  result.EntityNotExistError = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing TerminateWorkflowExecution: " + err2.Error())
    oprot.WriteMessageBegin("TerminateWorkflowExecution", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("TerminateWorkflowExecution", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type workflowServiceProcessorListOpenWorkflowExecutions struct {
  handler WorkflowService
}

func (p *workflowServiceProcessorListOpenWorkflowExecutions) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := WorkflowServiceListOpenWorkflowExecutionsArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("ListOpenWorkflowExecutions", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := WorkflowServiceListOpenWorkflowExecutionsResult{}
var retval *shared.ListOpenWorkflowExecutionsResponse
  var err2 error
  if retval, err2 = p.handler.ListOpenWorkflowExecutions(args.ListRequest); err2 != nil {
  switch v := err2.(type) {
    case *shared.BadRequestError:
  result.BadRequestError = v
    case *shared.InternalServiceError:
  result.InternalServiceError = v
    case *shared.EntityNotExistsError:
  result.EntityNotExistError = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ListOpenWorkflowExecutions: " + err2.Error())
    oprot.WriteMessageBegin("ListOpenWorkflowExecutions", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("ListOpenWorkflowExecutions", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type workflowServiceProcessorListClosedWorkflowExecutions struct {
  handler WorkflowService
}

func (p *workflowServiceProcessorListClosedWorkflowExecutions) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := WorkflowServiceListClosedWorkflowExecutionsArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("ListClosedWorkflowExecutions", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := WorkflowServiceListClosedWorkflowExecutionsResult{}
var retval *shared.ListClosedWorkflowExecutionsResponse
  var err2 error
  if retval, err2 = p.handler.ListClosedWorkflowExecutions(args.ListRequest); err2 != nil {
  switch v := err2.(type) {
    case *shared.BadRequestError:
  result.BadRequestError = v
    case *shared.InternalServiceError:
  result.InternalServiceError = v
    case *shared.EntityNotExistsError:
  result.EntityNotExistError = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ListClosedWorkflowExecutions: " + err2.Error())
    oprot.WriteMessageBegin("ListClosedWorkflowExecutions", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("ListClosedWorkflowExecutions", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - RegisterRequest
type WorkflowServiceRegisterDomainArgs struct {
  RegisterRequest *shared.RegisterDomainRequest `thrift:"registerRequest,1" db:"registerRequest" json:"registerRequest"`
}

func NewWorkflowServiceRegisterDomainArgs() *WorkflowServiceRegisterDomainArgs {
  return &WorkflowServiceRegisterDomainArgs{}
}

var WorkflowServiceRegisterDomainArgs_RegisterRequest_DEFAULT *shared.RegisterDomainRequest
func (p *WorkflowServiceRegisterDomainArgs) GetRegisterRequest() *shared.RegisterDomainRequest {
  if !p.IsSetRegisterRequest() {
    return WorkflowServiceRegisterDomainArgs_RegisterRequest_DEFAULT
  }
return p.RegisterRequest
}
func (p *WorkflowServiceRegisterDomainArgs) IsSetRegisterRequest() bool {
  return p.RegisterRequest != nil
}

func (p *WorkflowServiceRegisterDomainArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *WorkflowServiceRegisterDomainArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.RegisterRequest = &shared.RegisterDomainRequest{}
  if err := p.RegisterRequest.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RegisterRequest), err)
  }
  return nil
}

func (p *WorkflowServiceRegisterDomainArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("RegisterDomain_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *WorkflowServiceRegisterDomainArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("registerRequest", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:registerRequest: ", p), err) }
  if err := p.RegisterRequest.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RegisterRequest), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:registerRequest: ", p), err) }
  return err
}

func (p *WorkflowServiceRegisterDomainArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("WorkflowServiceRegisterDomainArgs(%+v)", *p)
}

// Attributes:
//  - BadRequestError
//  - InternalServiceError
//  - DomainExistsError
type WorkflowServiceRegisterDomainResult struct {
  BadRequestError *shared.BadRequestError `thrift:"badRequestError,1" db:"badRequestError" json:"badRequestError,omitempty"`
  InternalServiceError *shared.InternalServiceError `thrift:"internalServiceError,2" db:"internalServiceError" json:"internalServiceError,omitempty"`
  DomainExistsError *shared.DomainAlreadyExistsError `thrift:"domainExistsError,3" db:"domainExistsError" json:"domainExistsError,omitempty"`
}

func NewWorkflowServiceRegisterDomainResult() *WorkflowServiceRegisterDomainResult {
  return &WorkflowServiceRegisterDomainResult{}
}

var WorkflowServiceRegisterDomainResult_BadRequestError_DEFAULT *shared.BadRequestError
func (p *WorkflowServiceRegisterDomainResult) GetBadRequestError() *shared.BadRequestError {
  if !p.IsSetBadRequestError() {
    return WorkflowServiceRegisterDomainResult_BadRequestError_DEFAULT
  }
return p.BadRequestError
}
var WorkflowServiceRegisterDomainResult_InternalServiceError_DEFAULT *shared.InternalServiceError
func (p *WorkflowServiceRegisterDomainResult) GetInternalServiceError() *shared.InternalServiceError {
  if !p.IsSetInternalServiceError() {
    return WorkflowServiceRegisterDomainResult_InternalServiceError_DEFAULT
  }
return p.InternalServiceError
}
var WorkflowServiceRegisterDomainResult_DomainExistsError_DEFAULT *shared.DomainAlreadyExistsError
func (p *WorkflowServiceRegisterDomainResult) GetDomainExistsError() *shared.DomainAlreadyExistsError {
  if !p.IsSetDomainExistsError() {
    return WorkflowServiceRegisterDomainResult_DomainExistsError_DEFAULT
  }
return p.DomainExistsError
}
func (p *WorkflowServiceRegisterDomainResult) IsSetBadRequestError() bool {
  return p.BadRequestError != nil
}

func (p *WorkflowServiceRegisterDomainResult) IsSetInternalServiceError() bool {
  return p.InternalServiceError != nil
}

func (p *WorkflowServiceRegisterDomainResult) IsSetDomainExistsError() bool {
  return p.DomainExistsError != nil
}

func (p *WorkflowServiceRegisterDomainResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *WorkflowServiceRegisterDomainResult)  ReadField1(iprot thrift.TProtocol) error {
  p.BadRequestError = &shared.BadRequestError{}
  if err := p.BadRequestError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.BadRequestError), err)
  }
  return nil
}

func (p *WorkflowServiceRegisterDomainResult)  ReadField2(iprot thrift.TProtocol) error {
  p.InternalServiceError = &shared.InternalServiceError{}
  if err := p.InternalServiceError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.InternalServiceError), err)
  }
  return nil
}

func (p *WorkflowServiceRegisterDomainResult)  ReadField3(iprot thrift.TProtocol) error {
  p.DomainExistsError = &shared.DomainAlreadyExistsError{}
  if err := p.DomainExistsError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.DomainExistsError), err)
  }
  return nil
}

func (p *WorkflowServiceRegisterDomainResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("RegisterDomain_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *WorkflowServiceRegisterDomainResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetBadRequestError() {
    if err := oprot.WriteFieldBegin("badRequestError", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:badRequestError: ", p), err) }
    if err := p.BadRequestError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.BadRequestError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:badRequestError: ", p), err) }
  }
  return err
}

func (p *WorkflowServiceRegisterDomainResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetInternalServiceError() {
    if err := oprot.WriteFieldBegin("internalServiceError", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:internalServiceError: ", p), err) }
    if err := p.InternalServiceError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.InternalServiceError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:internalServiceError: ", p), err) }
  }
  return err
}

func (p *WorkflowServiceRegisterDomainResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetDomainExistsError() {
    if err := oprot.WriteFieldBegin("domainExistsError", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:domainExistsError: ", p), err) }
    if err := p.DomainExistsError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.DomainExistsError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:domainExistsError: ", p), err) }
  }
  return err
}

func (p *WorkflowServiceRegisterDomainResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("WorkflowServiceRegisterDomainResult(%+v)", *p)
}

// Attributes:
//  - DescribeRequest
type WorkflowServiceDescribeDomainArgs struct {
  DescribeRequest *shared.DescribeDomainRequest `thrift:"describeRequest,1" db:"describeRequest" json:"describeRequest"`
}

func NewWorkflowServiceDescribeDomainArgs() *WorkflowServiceDescribeDomainArgs {
  return &WorkflowServiceDescribeDomainArgs{}
}

var WorkflowServiceDescribeDomainArgs_DescribeRequest_DEFAULT *shared.DescribeDomainRequest
func (p *WorkflowServiceDescribeDomainArgs) GetDescribeRequest() *shared.DescribeDomainRequest {
  if !p.IsSetDescribeRequest() {
    return WorkflowServiceDescribeDomainArgs_DescribeRequest_DEFAULT
  }
return p.DescribeRequest
}
func (p *WorkflowServiceDescribeDomainArgs) IsSetDescribeRequest() bool {
  return p.DescribeRequest != nil
}

func (p *WorkflowServiceDescribeDomainArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *WorkflowServiceDescribeDomainArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.DescribeRequest = &shared.DescribeDomainRequest{}
  if err := p.DescribeRequest.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.DescribeRequest), err)
  }
  return nil
}

func (p *WorkflowServiceDescribeDomainArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("DescribeDomain_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *WorkflowServiceDescribeDomainArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("describeRequest", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:describeRequest: ", p), err) }
  if err := p.DescribeRequest.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.DescribeRequest), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:describeRequest: ", p), err) }
  return err
}

func (p *WorkflowServiceDescribeDomainArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("WorkflowServiceDescribeDomainArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - BadRequestError
//  - InternalServiceError
//  - EntityNotExistError
type WorkflowServiceDescribeDomainResult struct {
  Success *shared.DescribeDomainResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
  BadRequestError *shared.BadRequestError `thrift:"badRequestError,1" db:"badRequestError" json:"badRequestError,omitempty"`
  InternalServiceError *shared.InternalServiceError `thrift:"internalServiceError,2" db:"internalServiceError" json:"internalServiceError,omitempty"`
  EntityNotExistError *shared.EntityNotExistsError `thrift:"entityNotExistError,3" db:"entityNotExistError" json:"entityNotExistError,omitempty"`
}

func NewWorkflowServiceDescribeDomainResult() *WorkflowServiceDescribeDomainResult {
  return &WorkflowServiceDescribeDomainResult{}
}

var WorkflowServiceDescribeDomainResult_Success_DEFAULT *shared.DescribeDomainResponse
func (p *WorkflowServiceDescribeDomainResult) GetSuccess() *shared.DescribeDomainResponse {
  if !p.IsSetSuccess() {
    return WorkflowServiceDescribeDomainResult_Success_DEFAULT
  }
return p.Success
}
var WorkflowServiceDescribeDomainResult_BadRequestError_DEFAULT *shared.BadRequestError
func (p *WorkflowServiceDescribeDomainResult) GetBadRequestError() *shared.BadRequestError {
  if !p.IsSetBadRequestError() {
    return WorkflowServiceDescribeDomainResult_BadRequestError_DEFAULT
  }
return p.BadRequestError
}
var WorkflowServiceDescribeDomainResult_InternalServiceError_DEFAULT *shared.InternalServiceError
func (p *WorkflowServiceDescribeDomainResult) GetInternalServiceError() *shared.InternalServiceError {
  if !p.IsSetInternalServiceError() {
    return WorkflowServiceDescribeDomainResult_InternalServiceError_DEFAULT
  }
return p.InternalServiceError
}
var WorkflowServiceDescribeDomainResult_EntityNotExistError_DEFAULT *shared.EntityNotExistsError
func (p *WorkflowServiceDescribeDomainResult) GetEntityNotExistError() *shared.EntityNotExistsError {
  if !p.IsSetEntityNotExistError() {
    return WorkflowServiceDescribeDomainResult_EntityNotExistError_DEFAULT
  }
return p.EntityNotExistError
}
func (p *WorkflowServiceDescribeDomainResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *WorkflowServiceDescribeDomainResult) IsSetBadRequestError() bool {
  return p.BadRequestError != nil
}

func (p *WorkflowServiceDescribeDomainResult) IsSetInternalServiceError() bool {
  return p.InternalServiceError != nil
}

func (p *WorkflowServiceDescribeDomainResult) IsSetEntityNotExistError() bool {
  return p.EntityNotExistError != nil
}

func (p *WorkflowServiceDescribeDomainResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *WorkflowServiceDescribeDomainResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &shared.DescribeDomainResponse{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *WorkflowServiceDescribeDomainResult)  ReadField1(iprot thrift.TProtocol) error {
  p.BadRequestError = &shared.BadRequestError{}
  if err := p.BadRequestError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.BadRequestError), err)
  }
  return nil
}

func (p *WorkflowServiceDescribeDomainResult)  ReadField2(iprot thrift.TProtocol) error {
  p.InternalServiceError = &shared.InternalServiceError{}
  if err := p.InternalServiceError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.InternalServiceError), err)
  }
  return nil
}

func (p *WorkflowServiceDescribeDomainResult)  ReadField3(iprot thrift.TProtocol) error {
  p.EntityNotExistError = &shared.EntityNotExistsError{}
  if err := p.EntityNotExistError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.EntityNotExistError), err)
  }
  return nil
}

func (p *WorkflowServiceDescribeDomainResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("DescribeDomain_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *WorkflowServiceDescribeDomainResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *WorkflowServiceDescribeDomainResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetBadRequestError() {
    if err := oprot.WriteFieldBegin("badRequestError", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:badRequestError: ", p), err) }
    if err := p.BadRequestError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.BadRequestError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:badRequestError: ", p), err) }
  }
  return err
}

func (p *WorkflowServiceDescribeDomainResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetInternalServiceError() {
    if err := oprot.WriteFieldBegin("internalServiceError", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:internalServiceError: ", p), err) }
    if err := p.InternalServiceError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.InternalServiceError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:internalServiceError: ", p), err) }
  }
  return err
}

func (p *WorkflowServiceDescribeDomainResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetEntityNotExistError() {
    if err := oprot.WriteFieldBegin("entityNotExistError", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:entityNotExistError: ", p), err) }
    if err := p.EntityNotExistError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.EntityNotExistError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:entityNotExistError: ", p), err) }
  }
  return err
}

func (p *WorkflowServiceDescribeDomainResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("WorkflowServiceDescribeDomainResult(%+v)", *p)
}

// Attributes:
//  - UpdateRequest
type WorkflowServiceUpdateDomainArgs struct {
  UpdateRequest *shared.UpdateDomainRequest `thrift:"updateRequest,1" db:"updateRequest" json:"updateRequest"`
}

func NewWorkflowServiceUpdateDomainArgs() *WorkflowServiceUpdateDomainArgs {
  return &WorkflowServiceUpdateDomainArgs{}
}

var WorkflowServiceUpdateDomainArgs_UpdateRequest_DEFAULT *shared.UpdateDomainRequest
func (p *WorkflowServiceUpdateDomainArgs) GetUpdateRequest() *shared.UpdateDomainRequest {
  if !p.IsSetUpdateRequest() {
    return WorkflowServiceUpdateDomainArgs_UpdateRequest_DEFAULT
  }
return p.UpdateRequest
}
func (p *WorkflowServiceUpdateDomainArgs) IsSetUpdateRequest() bool {
  return p.UpdateRequest != nil
}

func (p *WorkflowServiceUpdateDomainArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *WorkflowServiceUpdateDomainArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.UpdateRequest = &shared.UpdateDomainRequest{}
  if err := p.UpdateRequest.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.UpdateRequest), err)
  }
  return nil
}

func (p *WorkflowServiceUpdateDomainArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("UpdateDomain_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *WorkflowServiceUpdateDomainArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("updateRequest", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:updateRequest: ", p), err) }
  if err := p.UpdateRequest.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.UpdateRequest), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:updateRequest: ", p), err) }
  return err
}

func (p *WorkflowServiceUpdateDomainArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("WorkflowServiceUpdateDomainArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - BadRequestError
//  - InternalServiceError
//  - EntityNotExistError
type WorkflowServiceUpdateDomainResult struct {
  Success *shared.UpdateDomainResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
  BadRequestError *shared.BadRequestError `thrift:"badRequestError,1" db:"badRequestError" json:"badRequestError,omitempty"`
  InternalServiceError *shared.InternalServiceError `thrift:"internalServiceError,2" db:"internalServiceError" json:"internalServiceError,omitempty"`
  EntityNotExistError *shared.EntityNotExistsError `thrift:"entityNotExistError,3" db:"entityNotExistError" json:"entityNotExistError,omitempty"`
}

func NewWorkflowServiceUpdateDomainResult() *WorkflowServiceUpdateDomainResult {
  return &WorkflowServiceUpdateDomainResult{}
}

var WorkflowServiceUpdateDomainResult_Success_DEFAULT *shared.UpdateDomainResponse
func (p *WorkflowServiceUpdateDomainResult) GetSuccess() *shared.UpdateDomainResponse {
  if !p.IsSetSuccess() {
    return WorkflowServiceUpdateDomainResult_Success_DEFAULT
  }
return p.Success
}
var WorkflowServiceUpdateDomainResult_BadRequestError_DEFAULT *shared.BadRequestError
func (p *WorkflowServiceUpdateDomainResult) GetBadRequestError() *shared.BadRequestError {
  if !p.IsSetBadRequestError() {
    return WorkflowServiceUpdateDomainResult_BadRequestError_DEFAULT
  }
return p.BadRequestError
}
var WorkflowServiceUpdateDomainResult_InternalServiceError_DEFAULT *shared.InternalServiceError
func (p *WorkflowServiceUpdateDomainResult) GetInternalServiceError() *shared.InternalServiceError {
  if !p.IsSetInternalServiceError() {
    return WorkflowServiceUpdateDomainResult_InternalServiceError_DEFAULT
  }
return p.InternalServiceError
}
var WorkflowServiceUpdateDomainResult_EntityNotExistError_DEFAULT *shared.EntityNotExistsError
func (p *WorkflowServiceUpdateDomainResult) GetEntityNotExistError() *shared.EntityNotExistsError {
  if !p.IsSetEntityNotExistError() {
    return WorkflowServiceUpdateDomainResult_EntityNotExistError_DEFAULT
  }
return p.EntityNotExistError
}
func (p *WorkflowServiceUpdateDomainResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *WorkflowServiceUpdateDomainResult) IsSetBadRequestError() bool {
  return p.BadRequestError != nil
}

func (p *WorkflowServiceUpdateDomainResult) IsSetInternalServiceError() bool {
  return p.InternalServiceError != nil
}

func (p *WorkflowServiceUpdateDomainResult) IsSetEntityNotExistError() bool {
  return p.EntityNotExistError != nil
}

func (p *WorkflowServiceUpdateDomainResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *WorkflowServiceUpdateDomainResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &shared.UpdateDomainResponse{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *WorkflowServiceUpdateDomainResult)  ReadField1(iprot thrift.TProtocol) error {
  p.BadRequestError = &shared.BadRequestError{}
  if err := p.BadRequestError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.BadRequestError), err)
  }
  return nil
}

func (p *WorkflowServiceUpdateDomainResult)  ReadField2(iprot thrift.TProtocol) error {
  p.InternalServiceError = &shared.InternalServiceError{}
  if err := p.InternalServiceError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.InternalServiceError), err)
  }
  return nil
}

func (p *WorkflowServiceUpdateDomainResult)  ReadField3(iprot thrift.TProtocol) error {
  p.EntityNotExistError = &shared.EntityNotExistsError{}
  if err := p.EntityNotExistError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.EntityNotExistError), err)
  }
  return nil
}

func (p *WorkflowServiceUpdateDomainResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("UpdateDomain_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *WorkflowServiceUpdateDomainResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *WorkflowServiceUpdateDomainResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetBadRequestError() {
    if err := oprot.WriteFieldBegin("badRequestError", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:badRequestError: ", p), err) }
    if err := p.BadRequestError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.BadRequestError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:badRequestError: ", p), err) }
  }
  return err
}

func (p *WorkflowServiceUpdateDomainResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetInternalServiceError() {
    if err := oprot.WriteFieldBegin("internalServiceError", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:internalServiceError: ", p), err) }
    if err := p.InternalServiceError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.InternalServiceError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:internalServiceError: ", p), err) }
  }
  return err
}

func (p *WorkflowServiceUpdateDomainResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetEntityNotExistError() {
    if err := oprot.WriteFieldBegin("entityNotExistError", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:entityNotExistError: ", p), err) }
    if err := p.EntityNotExistError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.EntityNotExistError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:entityNotExistError: ", p), err) }
  }
  return err
}

func (p *WorkflowServiceUpdateDomainResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("WorkflowServiceUpdateDomainResult(%+v)", *p)
}

// Attributes:
//  - DeprecateRequest
type WorkflowServiceDeprecateDomainArgs struct {
  DeprecateRequest *shared.DeprecateDomainRequest `thrift:"deprecateRequest,1" db:"deprecateRequest" json:"deprecateRequest"`
}

func NewWorkflowServiceDeprecateDomainArgs() *WorkflowServiceDeprecateDomainArgs {
  return &WorkflowServiceDeprecateDomainArgs{}
}

var WorkflowServiceDeprecateDomainArgs_DeprecateRequest_DEFAULT *shared.DeprecateDomainRequest
func (p *WorkflowServiceDeprecateDomainArgs) GetDeprecateRequest() *shared.DeprecateDomainRequest {
  if !p.IsSetDeprecateRequest() {
    return WorkflowServiceDeprecateDomainArgs_DeprecateRequest_DEFAULT
  }
return p.DeprecateRequest
}
func (p *WorkflowServiceDeprecateDomainArgs) IsSetDeprecateRequest() bool {
  return p.DeprecateRequest != nil
}

func (p *WorkflowServiceDeprecateDomainArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *WorkflowServiceDeprecateDomainArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.DeprecateRequest = &shared.DeprecateDomainRequest{}
  if err := p.DeprecateRequest.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.DeprecateRequest), err)
  }
  return nil
}

func (p *WorkflowServiceDeprecateDomainArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("DeprecateDomain_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *WorkflowServiceDeprecateDomainArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("deprecateRequest", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:deprecateRequest: ", p), err) }
  if err := p.DeprecateRequest.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.DeprecateRequest), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:deprecateRequest: ", p), err) }
  return err
}

func (p *WorkflowServiceDeprecateDomainArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("WorkflowServiceDeprecateDomainArgs(%+v)", *p)
}

// Attributes:
//  - BadRequestError
//  - InternalServiceError
//  - EntityNotExistError
type WorkflowServiceDeprecateDomainResult struct {
  BadRequestError *shared.BadRequestError `thrift:"badRequestError,1" db:"badRequestError" json:"badRequestError,omitempty"`
  InternalServiceError *shared.InternalServiceError `thrift:"internalServiceError,2" db:"internalServiceError" json:"internalServiceError,omitempty"`
  EntityNotExistError *shared.EntityNotExistsError `thrift:"entityNotExistError,3" db:"entityNotExistError" json:"entityNotExistError,omitempty"`
}

func NewWorkflowServiceDeprecateDomainResult() *WorkflowServiceDeprecateDomainResult {
  return &WorkflowServiceDeprecateDomainResult{}
}

var WorkflowServiceDeprecateDomainResult_BadRequestError_DEFAULT *shared.BadRequestError
func (p *WorkflowServiceDeprecateDomainResult) GetBadRequestError() *shared.BadRequestError {
  if !p.IsSetBadRequestError() {
    return WorkflowServiceDeprecateDomainResult_BadRequestError_DEFAULT
  }
return p.BadRequestError
}
var WorkflowServiceDeprecateDomainResult_InternalServiceError_DEFAULT *shared.InternalServiceError
func (p *WorkflowServiceDeprecateDomainResult) GetInternalServiceError() *shared.InternalServiceError {
  if !p.IsSetInternalServiceError() {
    return WorkflowServiceDeprecateDomainResult_InternalServiceError_DEFAULT
  }
return p.InternalServiceError
}
var WorkflowServiceDeprecateDomainResult_EntityNotExistError_DEFAULT *shared.EntityNotExistsError
func (p *WorkflowServiceDeprecateDomainResult) GetEntityNotExistError() *shared.EntityNotExistsError {
  if !p.IsSetEntityNotExistError() {
    return WorkflowServiceDeprecateDomainResult_EntityNotExistError_DEFAULT
  }
return p.EntityNotExistError
}
func (p *WorkflowServiceDeprecateDomainResult) IsSetBadRequestError() bool {
  return p.BadRequestError != nil
}

func (p *WorkflowServiceDeprecateDomainResult) IsSetInternalServiceError() bool {
  return p.InternalServiceError != nil
}

func (p *WorkflowServiceDeprecateDomainResult) IsSetEntityNotExistError() bool {
  return p.EntityNotExistError != nil
}

func (p *WorkflowServiceDeprecateDomainResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *WorkflowServiceDeprecateDomainResult)  ReadField1(iprot thrift.TProtocol) error {
  p.BadRequestError = &shared.BadRequestError{}
  if err := p.BadRequestError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.BadRequestError), err)
  }
  return nil
}

func (p *WorkflowServiceDeprecateDomainResult)  ReadField2(iprot thrift.TProtocol) error {
  p.InternalServiceError = &shared.InternalServiceError{}
  if err := p.InternalServiceError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.InternalServiceError), err)
  }
  return nil
}

func (p *WorkflowServiceDeprecateDomainResult)  ReadField3(iprot thrift.TProtocol) error {
  p.EntityNotExistError = &shared.EntityNotExistsError{}
  if err := p.EntityNotExistError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.EntityNotExistError), err)
  }
  return nil
}

func (p *WorkflowServiceDeprecateDomainResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("DeprecateDomain_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *WorkflowServiceDeprecateDomainResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetBadRequestError() {
    if err := oprot.WriteFieldBegin("badRequestError", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:badRequestError: ", p), err) }
    if err := p.BadRequestError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.BadRequestError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:badRequestError: ", p), err) }
  }
  return err
}

func (p *WorkflowServiceDeprecateDomainResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetInternalServiceError() {
    if err := oprot.WriteFieldBegin("internalServiceError", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:internalServiceError: ", p), err) }
    if err := p.InternalServiceError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.InternalServiceError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:internalServiceError: ", p), err) }
  }
  return err
}

func (p *WorkflowServiceDeprecateDomainResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetEntityNotExistError() {
    if err := oprot.WriteFieldBegin("entityNotExistError", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:entityNotExistError: ", p), err) }
    if err := p.EntityNotExistError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.EntityNotExistError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:entityNotExistError: ", p), err) }
  }
  return err
}

func (p *WorkflowServiceDeprecateDomainResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("WorkflowServiceDeprecateDomainResult(%+v)", *p)
}

// Attributes:
//  - StartRequest
type WorkflowServiceStartWorkflowExecutionArgs struct {
  StartRequest *shared.StartWorkflowExecutionRequest `thrift:"startRequest,1" db:"startRequest" json:"startRequest"`
}

func NewWorkflowServiceStartWorkflowExecutionArgs() *WorkflowServiceStartWorkflowExecutionArgs {
  return &WorkflowServiceStartWorkflowExecutionArgs{}
}

var WorkflowServiceStartWorkflowExecutionArgs_StartRequest_DEFAULT *shared.StartWorkflowExecutionRequest
func (p *WorkflowServiceStartWorkflowExecutionArgs) GetStartRequest() *shared.StartWorkflowExecutionRequest {
  if !p.IsSetStartRequest() {
    return WorkflowServiceStartWorkflowExecutionArgs_StartRequest_DEFAULT
  }
return p.StartRequest
}
func (p *WorkflowServiceStartWorkflowExecutionArgs) IsSetStartRequest() bool {
  return p.StartRequest != nil
}

func (p *WorkflowServiceStartWorkflowExecutionArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *WorkflowServiceStartWorkflowExecutionArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.StartRequest = &shared.StartWorkflowExecutionRequest{}
  if err := p.StartRequest.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.StartRequest), err)
  }
  return nil
}

func (p *WorkflowServiceStartWorkflowExecutionArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("StartWorkflowExecution_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *WorkflowServiceStartWorkflowExecutionArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("startRequest", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:startRequest: ", p), err) }
  if err := p.StartRequest.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.StartRequest), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:startRequest: ", p), err) }
  return err
}

func (p *WorkflowServiceStartWorkflowExecutionArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("WorkflowServiceStartWorkflowExecutionArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - BadRequestError
//  - InternalServiceError
//  - SessionAlreadyExistError
type WorkflowServiceStartWorkflowExecutionResult struct {
  Success *shared.StartWorkflowExecutionResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
  BadRequestError *shared.BadRequestError `thrift:"badRequestError,1" db:"badRequestError" json:"badRequestError,omitempty"`
  InternalServiceError *shared.InternalServiceError `thrift:"internalServiceError,2" db:"internalServiceError" json:"internalServiceError,omitempty"`
  SessionAlreadyExistError *shared.WorkflowExecutionAlreadyStartedError `thrift:"sessionAlreadyExistError,3" db:"sessionAlreadyExistError" json:"sessionAlreadyExistError,omitempty"`
}

func NewWorkflowServiceStartWorkflowExecutionResult() *WorkflowServiceStartWorkflowExecutionResult {
  return &WorkflowServiceStartWorkflowExecutionResult{}
}

var WorkflowServiceStartWorkflowExecutionResult_Success_DEFAULT *shared.StartWorkflowExecutionResponse
func (p *WorkflowServiceStartWorkflowExecutionResult) GetSuccess() *shared.StartWorkflowExecutionResponse {
  if !p.IsSetSuccess() {
    return WorkflowServiceStartWorkflowExecutionResult_Success_DEFAULT
  }
return p.Success
}
var WorkflowServiceStartWorkflowExecutionResult_BadRequestError_DEFAULT *shared.BadRequestError
func (p *WorkflowServiceStartWorkflowExecutionResult) GetBadRequestError() *shared.BadRequestError {
  if !p.IsSetBadRequestError() {
    return WorkflowServiceStartWorkflowExecutionResult_BadRequestError_DEFAULT
  }
return p.BadRequestError
}
var WorkflowServiceStartWorkflowExecutionResult_InternalServiceError_DEFAULT *shared.InternalServiceError
func (p *WorkflowServiceStartWorkflowExecutionResult) GetInternalServiceError() *shared.InternalServiceError {
  if !p.IsSetInternalServiceError() {
    return WorkflowServiceStartWorkflowExecutionResult_InternalServiceError_DEFAULT
  }
return p.InternalServiceError
}
var WorkflowServiceStartWorkflowExecutionResult_SessionAlreadyExistError_DEFAULT *shared.WorkflowExecutionAlreadyStartedError
func (p *WorkflowServiceStartWorkflowExecutionResult) GetSessionAlreadyExistError() *shared.WorkflowExecutionAlreadyStartedError {
  if !p.IsSetSessionAlreadyExistError() {
    return WorkflowServiceStartWorkflowExecutionResult_SessionAlreadyExistError_DEFAULT
  }
return p.SessionAlreadyExistError
}
func (p *WorkflowServiceStartWorkflowExecutionResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *WorkflowServiceStartWorkflowExecutionResult) IsSetBadRequestError() bool {
  return p.BadRequestError != nil
}

func (p *WorkflowServiceStartWorkflowExecutionResult) IsSetInternalServiceError() bool {
  return p.InternalServiceError != nil
}

func (p *WorkflowServiceStartWorkflowExecutionResult) IsSetSessionAlreadyExistError() bool {
  return p.SessionAlreadyExistError != nil
}

func (p *WorkflowServiceStartWorkflowExecutionResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *WorkflowServiceStartWorkflowExecutionResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &shared.StartWorkflowExecutionResponse{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *WorkflowServiceStartWorkflowExecutionResult)  ReadField1(iprot thrift.TProtocol) error {
  p.BadRequestError = &shared.BadRequestError{}
  if err := p.BadRequestError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.BadRequestError), err)
  }
  return nil
}

func (p *WorkflowServiceStartWorkflowExecutionResult)  ReadField2(iprot thrift.TProtocol) error {
  p.InternalServiceError = &shared.InternalServiceError{}
  if err := p.InternalServiceError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.InternalServiceError), err)
  }
  return nil
}

func (p *WorkflowServiceStartWorkflowExecutionResult)  ReadField3(iprot thrift.TProtocol) error {
  p.SessionAlreadyExistError = &shared.WorkflowExecutionAlreadyStartedError{}
  if err := p.SessionAlreadyExistError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SessionAlreadyExistError), err)
  }
  return nil
}

func (p *WorkflowServiceStartWorkflowExecutionResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("StartWorkflowExecution_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *WorkflowServiceStartWorkflowExecutionResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *WorkflowServiceStartWorkflowExecutionResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetBadRequestError() {
    if err := oprot.WriteFieldBegin("badRequestError", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:badRequestError: ", p), err) }
    if err := p.BadRequestError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.BadRequestError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:badRequestError: ", p), err) }
  }
  return err
}

func (p *WorkflowServiceStartWorkflowExecutionResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetInternalServiceError() {
    if err := oprot.WriteFieldBegin("internalServiceError", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:internalServiceError: ", p), err) }
    if err := p.InternalServiceError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.InternalServiceError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:internalServiceError: ", p), err) }
  }
  return err
}

func (p *WorkflowServiceStartWorkflowExecutionResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetSessionAlreadyExistError() {
    if err := oprot.WriteFieldBegin("sessionAlreadyExistError", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:sessionAlreadyExistError: ", p), err) }
    if err := p.SessionAlreadyExistError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SessionAlreadyExistError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:sessionAlreadyExistError: ", p), err) }
  }
  return err
}

func (p *WorkflowServiceStartWorkflowExecutionResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("WorkflowServiceStartWorkflowExecutionResult(%+v)", *p)
}

// Attributes:
//  - GetRequest
type WorkflowServiceGetWorkflowExecutionHistoryArgs struct {
  GetRequest *shared.GetWorkflowExecutionHistoryRequest `thrift:"getRequest,1" db:"getRequest" json:"getRequest"`
}

func NewWorkflowServiceGetWorkflowExecutionHistoryArgs() *WorkflowServiceGetWorkflowExecutionHistoryArgs {
  return &WorkflowServiceGetWorkflowExecutionHistoryArgs{}
}

var WorkflowServiceGetWorkflowExecutionHistoryArgs_GetRequest_DEFAULT *shared.GetWorkflowExecutionHistoryRequest
func (p *WorkflowServiceGetWorkflowExecutionHistoryArgs) GetGetRequest() *shared.GetWorkflowExecutionHistoryRequest {
  if !p.IsSetGetRequest() {
    return WorkflowServiceGetWorkflowExecutionHistoryArgs_GetRequest_DEFAULT
  }
return p.GetRequest
}
func (p *WorkflowServiceGetWorkflowExecutionHistoryArgs) IsSetGetRequest() bool {
  return p.GetRequest != nil
}

func (p *WorkflowServiceGetWorkflowExecutionHistoryArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *WorkflowServiceGetWorkflowExecutionHistoryArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.GetRequest = &shared.GetWorkflowExecutionHistoryRequest{}
  if err := p.GetRequest.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.GetRequest), err)
  }
  return nil
}

func (p *WorkflowServiceGetWorkflowExecutionHistoryArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GetWorkflowExecutionHistory_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *WorkflowServiceGetWorkflowExecutionHistoryArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("getRequest", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:getRequest: ", p), err) }
  if err := p.GetRequest.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.GetRequest), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:getRequest: ", p), err) }
  return err
}

func (p *WorkflowServiceGetWorkflowExecutionHistoryArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("WorkflowServiceGetWorkflowExecutionHistoryArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - BadRequestError
//  - InternalServiceError
//  - EntityNotExistError
type WorkflowServiceGetWorkflowExecutionHistoryResult struct {
  Success *shared.GetWorkflowExecutionHistoryResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
  BadRequestError *shared.BadRequestError `thrift:"badRequestError,1" db:"badRequestError" json:"badRequestError,omitempty"`
  InternalServiceError *shared.InternalServiceError `thrift:"internalServiceError,2" db:"internalServiceError" json:"internalServiceError,omitempty"`
  EntityNotExistError *shared.EntityNotExistsError `thrift:"entityNotExistError,3" db:"entityNotExistError" json:"entityNotExistError,omitempty"`
}

func NewWorkflowServiceGetWorkflowExecutionHistoryResult() *WorkflowServiceGetWorkflowExecutionHistoryResult {
  return &WorkflowServiceGetWorkflowExecutionHistoryResult{}
}

var WorkflowServiceGetWorkflowExecutionHistoryResult_Success_DEFAULT *shared.GetWorkflowExecutionHistoryResponse
func (p *WorkflowServiceGetWorkflowExecutionHistoryResult) GetSuccess() *shared.GetWorkflowExecutionHistoryResponse {
  if !p.IsSetSuccess() {
    return WorkflowServiceGetWorkflowExecutionHistoryResult_Success_DEFAULT
  }
return p.Success
}
var WorkflowServiceGetWorkflowExecutionHistoryResult_BadRequestError_DEFAULT *shared.BadRequestError
func (p *WorkflowServiceGetWorkflowExecutionHistoryResult) GetBadRequestError() *shared.BadRequestError {
  if !p.IsSetBadRequestError() {
    return WorkflowServiceGetWorkflowExecutionHistoryResult_BadRequestError_DEFAULT
  }
return p.BadRequestError
}
var WorkflowServiceGetWorkflowExecutionHistoryResult_InternalServiceError_DEFAULT *shared.InternalServiceError
func (p *WorkflowServiceGetWorkflowExecutionHistoryResult) GetInternalServiceError() *shared.InternalServiceError {
  if !p.IsSetInternalServiceError() {
    return WorkflowServiceGetWorkflowExecutionHistoryResult_InternalServiceError_DEFAULT
  }
return p.InternalServiceError
}
var WorkflowServiceGetWorkflowExecutionHistoryResult_EntityNotExistError_DEFAULT *shared.EntityNotExistsError
func (p *WorkflowServiceGetWorkflowExecutionHistoryResult) GetEntityNotExistError() *shared.EntityNotExistsError {
  if !p.IsSetEntityNotExistError() {
    return WorkflowServiceGetWorkflowExecutionHistoryResult_EntityNotExistError_DEFAULT
  }
return p.EntityNotExistError
}
func (p *WorkflowServiceGetWorkflowExecutionHistoryResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *WorkflowServiceGetWorkflowExecutionHistoryResult) IsSetBadRequestError() bool {
  return p.BadRequestError != nil
}

func (p *WorkflowServiceGetWorkflowExecutionHistoryResult) IsSetInternalServiceError() bool {
  return p.InternalServiceError != nil
}

func (p *WorkflowServiceGetWorkflowExecutionHistoryResult) IsSetEntityNotExistError() bool {
  return p.EntityNotExistError != nil
}

func (p *WorkflowServiceGetWorkflowExecutionHistoryResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *WorkflowServiceGetWorkflowExecutionHistoryResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &shared.GetWorkflowExecutionHistoryResponse{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *WorkflowServiceGetWorkflowExecutionHistoryResult)  ReadField1(iprot thrift.TProtocol) error {
  p.BadRequestError = &shared.BadRequestError{}
  if err := p.BadRequestError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.BadRequestError), err)
  }
  return nil
}

func (p *WorkflowServiceGetWorkflowExecutionHistoryResult)  ReadField2(iprot thrift.TProtocol) error {
  p.InternalServiceError = &shared.InternalServiceError{}
  if err := p.InternalServiceError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.InternalServiceError), err)
  }
  return nil
}

func (p *WorkflowServiceGetWorkflowExecutionHistoryResult)  ReadField3(iprot thrift.TProtocol) error {
  p.EntityNotExistError = &shared.EntityNotExistsError{}
  if err := p.EntityNotExistError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.EntityNotExistError), err)
  }
  return nil
}

func (p *WorkflowServiceGetWorkflowExecutionHistoryResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GetWorkflowExecutionHistory_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *WorkflowServiceGetWorkflowExecutionHistoryResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *WorkflowServiceGetWorkflowExecutionHistoryResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetBadRequestError() {
    if err := oprot.WriteFieldBegin("badRequestError", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:badRequestError: ", p), err) }
    if err := p.BadRequestError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.BadRequestError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:badRequestError: ", p), err) }
  }
  return err
}

func (p *WorkflowServiceGetWorkflowExecutionHistoryResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetInternalServiceError() {
    if err := oprot.WriteFieldBegin("internalServiceError", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:internalServiceError: ", p), err) }
    if err := p.InternalServiceError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.InternalServiceError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:internalServiceError: ", p), err) }
  }
  return err
}

func (p *WorkflowServiceGetWorkflowExecutionHistoryResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetEntityNotExistError() {
    if err := oprot.WriteFieldBegin("entityNotExistError", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:entityNotExistError: ", p), err) }
    if err := p.EntityNotExistError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.EntityNotExistError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:entityNotExistError: ", p), err) }
  }
  return err
}

func (p *WorkflowServiceGetWorkflowExecutionHistoryResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("WorkflowServiceGetWorkflowExecutionHistoryResult(%+v)", *p)
}

// Attributes:
//  - PollRequest
type WorkflowServicePollForDecisionTaskArgs struct {
  PollRequest *shared.PollForDecisionTaskRequest `thrift:"pollRequest,1" db:"pollRequest" json:"pollRequest"`
}

func NewWorkflowServicePollForDecisionTaskArgs() *WorkflowServicePollForDecisionTaskArgs {
  return &WorkflowServicePollForDecisionTaskArgs{}
}

var WorkflowServicePollForDecisionTaskArgs_PollRequest_DEFAULT *shared.PollForDecisionTaskRequest
func (p *WorkflowServicePollForDecisionTaskArgs) GetPollRequest() *shared.PollForDecisionTaskRequest {
  if !p.IsSetPollRequest() {
    return WorkflowServicePollForDecisionTaskArgs_PollRequest_DEFAULT
  }
return p.PollRequest
}
func (p *WorkflowServicePollForDecisionTaskArgs) IsSetPollRequest() bool {
  return p.PollRequest != nil
}

func (p *WorkflowServicePollForDecisionTaskArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *WorkflowServicePollForDecisionTaskArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.PollRequest = &shared.PollForDecisionTaskRequest{}
  if err := p.PollRequest.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.PollRequest), err)
  }
  return nil
}

func (p *WorkflowServicePollForDecisionTaskArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("PollForDecisionTask_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *WorkflowServicePollForDecisionTaskArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("pollRequest", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:pollRequest: ", p), err) }
  if err := p.PollRequest.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.PollRequest), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:pollRequest: ", p), err) }
  return err
}

func (p *WorkflowServicePollForDecisionTaskArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("WorkflowServicePollForDecisionTaskArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - BadRequestError
//  - InternalServiceError
type WorkflowServicePollForDecisionTaskResult struct {
  Success *shared.PollForDecisionTaskResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
  BadRequestError *shared.BadRequestError `thrift:"badRequestError,1" db:"badRequestError" json:"badRequestError,omitempty"`
  InternalServiceError *shared.InternalServiceError `thrift:"internalServiceError,2" db:"internalServiceError" json:"internalServiceError,omitempty"`
}

func NewWorkflowServicePollForDecisionTaskResult() *WorkflowServicePollForDecisionTaskResult {
  return &WorkflowServicePollForDecisionTaskResult{}
}

var WorkflowServicePollForDecisionTaskResult_Success_DEFAULT *shared.PollForDecisionTaskResponse
func (p *WorkflowServicePollForDecisionTaskResult) GetSuccess() *shared.PollForDecisionTaskResponse {
  if !p.IsSetSuccess() {
    return WorkflowServicePollForDecisionTaskResult_Success_DEFAULT
  }
return p.Success
}
var WorkflowServicePollForDecisionTaskResult_BadRequestError_DEFAULT *shared.BadRequestError
func (p *WorkflowServicePollForDecisionTaskResult) GetBadRequestError() *shared.BadRequestError {
  if !p.IsSetBadRequestError() {
    return WorkflowServicePollForDecisionTaskResult_BadRequestError_DEFAULT
  }
return p.BadRequestError
}
var WorkflowServicePollForDecisionTaskResult_InternalServiceError_DEFAULT *shared.InternalServiceError
func (p *WorkflowServicePollForDecisionTaskResult) GetInternalServiceError() *shared.InternalServiceError {
  if !p.IsSetInternalServiceError() {
    return WorkflowServicePollForDecisionTaskResult_InternalServiceError_DEFAULT
  }
return p.InternalServiceError
}
func (p *WorkflowServicePollForDecisionTaskResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *WorkflowServicePollForDecisionTaskResult) IsSetBadRequestError() bool {
  return p.BadRequestError != nil
}

func (p *WorkflowServicePollForDecisionTaskResult) IsSetInternalServiceError() bool {
  return p.InternalServiceError != nil
}

func (p *WorkflowServicePollForDecisionTaskResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *WorkflowServicePollForDecisionTaskResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &shared.PollForDecisionTaskResponse{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *WorkflowServicePollForDecisionTaskResult)  ReadField1(iprot thrift.TProtocol) error {
  p.BadRequestError = &shared.BadRequestError{}
  if err := p.BadRequestError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.BadRequestError), err)
  }
  return nil
}

func (p *WorkflowServicePollForDecisionTaskResult)  ReadField2(iprot thrift.TProtocol) error {
  p.InternalServiceError = &shared.InternalServiceError{}
  if err := p.InternalServiceError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.InternalServiceError), err)
  }
  return nil
}

func (p *WorkflowServicePollForDecisionTaskResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("PollForDecisionTask_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *WorkflowServicePollForDecisionTaskResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *WorkflowServicePollForDecisionTaskResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetBadRequestError() {
    if err := oprot.WriteFieldBegin("badRequestError", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:badRequestError: ", p), err) }
    if err := p.BadRequestError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.BadRequestError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:badRequestError: ", p), err) }
  }
  return err
}

func (p *WorkflowServicePollForDecisionTaskResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetInternalServiceError() {
    if err := oprot.WriteFieldBegin("internalServiceError", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:internalServiceError: ", p), err) }
    if err := p.InternalServiceError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.InternalServiceError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:internalServiceError: ", p), err) }
  }
  return err
}

func (p *WorkflowServicePollForDecisionTaskResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("WorkflowServicePollForDecisionTaskResult(%+v)", *p)
}

// Attributes:
//  - CompleteRequest
type WorkflowServiceRespondDecisionTaskCompletedArgs struct {
  CompleteRequest *shared.RespondDecisionTaskCompletedRequest `thrift:"completeRequest,1" db:"completeRequest" json:"completeRequest"`
}

func NewWorkflowServiceRespondDecisionTaskCompletedArgs() *WorkflowServiceRespondDecisionTaskCompletedArgs {
  return &WorkflowServiceRespondDecisionTaskCompletedArgs{}
}

var WorkflowServiceRespondDecisionTaskCompletedArgs_CompleteRequest_DEFAULT *shared.RespondDecisionTaskCompletedRequest
func (p *WorkflowServiceRespondDecisionTaskCompletedArgs) GetCompleteRequest() *shared.RespondDecisionTaskCompletedRequest {
  if !p.IsSetCompleteRequest() {
    return WorkflowServiceRespondDecisionTaskCompletedArgs_CompleteRequest_DEFAULT
  }
return p.CompleteRequest
}
func (p *WorkflowServiceRespondDecisionTaskCompletedArgs) IsSetCompleteRequest() bool {
  return p.CompleteRequest != nil
}

func (p *WorkflowServiceRespondDecisionTaskCompletedArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *WorkflowServiceRespondDecisionTaskCompletedArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.CompleteRequest = &shared.RespondDecisionTaskCompletedRequest{}
  if err := p.CompleteRequest.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.CompleteRequest), err)
  }
  return nil
}

func (p *WorkflowServiceRespondDecisionTaskCompletedArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("RespondDecisionTaskCompleted_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *WorkflowServiceRespondDecisionTaskCompletedArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("completeRequest", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:completeRequest: ", p), err) }
  if err := p.CompleteRequest.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.CompleteRequest), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:completeRequest: ", p), err) }
  return err
}

func (p *WorkflowServiceRespondDecisionTaskCompletedArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("WorkflowServiceRespondDecisionTaskCompletedArgs(%+v)", *p)
}

// Attributes:
//  - BadRequestError
//  - InternalServiceError
//  - EntityNotExistError
type WorkflowServiceRespondDecisionTaskCompletedResult struct {
  BadRequestError *shared.BadRequestError `thrift:"badRequestError,1" db:"badRequestError" json:"badRequestError,omitempty"`
  InternalServiceError *shared.InternalServiceError `thrift:"internalServiceError,2" db:"internalServiceError" json:"internalServiceError,omitempty"`
  EntityNotExistError *shared.EntityNotExistsError `thrift:"entityNotExistError,3" db:"entityNotExistError" json:"entityNotExistError,omitempty"`
}

func NewWorkflowServiceRespondDecisionTaskCompletedResult() *WorkflowServiceRespondDecisionTaskCompletedResult {
  return &WorkflowServiceRespondDecisionTaskCompletedResult{}
}

var WorkflowServiceRespondDecisionTaskCompletedResult_BadRequestError_DEFAULT *shared.BadRequestError
func (p *WorkflowServiceRespondDecisionTaskCompletedResult) GetBadRequestError() *shared.BadRequestError {
  if !p.IsSetBadRequestError() {
    return WorkflowServiceRespondDecisionTaskCompletedResult_BadRequestError_DEFAULT
  }
return p.BadRequestError
}
var WorkflowServiceRespondDecisionTaskCompletedResult_InternalServiceError_DEFAULT *shared.InternalServiceError
func (p *WorkflowServiceRespondDecisionTaskCompletedResult) GetInternalServiceError() *shared.InternalServiceError {
  if !p.IsSetInternalServiceError() {
    return WorkflowServiceRespondDecisionTaskCompletedResult_InternalServiceError_DEFAULT
  }
return p.InternalServiceError
}
var WorkflowServiceRespondDecisionTaskCompletedResult_EntityNotExistError_DEFAULT *shared.EntityNotExistsError
func (p *WorkflowServiceRespondDecisionTaskCompletedResult) GetEntityNotExistError() *shared.EntityNotExistsError {
  if !p.IsSetEntityNotExistError() {
    return WorkflowServiceRespondDecisionTaskCompletedResult_EntityNotExistError_DEFAULT
  }
return p.EntityNotExistError
}
func (p *WorkflowServiceRespondDecisionTaskCompletedResult) IsSetBadRequestError() bool {
  return p.BadRequestError != nil
}

func (p *WorkflowServiceRespondDecisionTaskCompletedResult) IsSetInternalServiceError() bool {
  return p.InternalServiceError != nil
}

func (p *WorkflowServiceRespondDecisionTaskCompletedResult) IsSetEntityNotExistError() bool {
  return p.EntityNotExistError != nil
}

func (p *WorkflowServiceRespondDecisionTaskCompletedResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *WorkflowServiceRespondDecisionTaskCompletedResult)  ReadField1(iprot thrift.TProtocol) error {
  p.BadRequestError = &shared.BadRequestError{}
  if err := p.BadRequestError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.BadRequestError), err)
  }
  return nil
}

func (p *WorkflowServiceRespondDecisionTaskCompletedResult)  ReadField2(iprot thrift.TProtocol) error {
  p.InternalServiceError = &shared.InternalServiceError{}
  if err := p.InternalServiceError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.InternalServiceError), err)
  }
  return nil
}

func (p *WorkflowServiceRespondDecisionTaskCompletedResult)  ReadField3(iprot thrift.TProtocol) error {
  p.EntityNotExistError = &shared.EntityNotExistsError{}
  if err := p.EntityNotExistError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.EntityNotExistError), err)
  }
  return nil
}

func (p *WorkflowServiceRespondDecisionTaskCompletedResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("RespondDecisionTaskCompleted_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *WorkflowServiceRespondDecisionTaskCompletedResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetBadRequestError() {
    if err := oprot.WriteFieldBegin("badRequestError", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:badRequestError: ", p), err) }
    if err := p.BadRequestError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.BadRequestError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:badRequestError: ", p), err) }
  }
  return err
}

func (p *WorkflowServiceRespondDecisionTaskCompletedResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetInternalServiceError() {
    if err := oprot.WriteFieldBegin("internalServiceError", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:internalServiceError: ", p), err) }
    if err := p.InternalServiceError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.InternalServiceError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:internalServiceError: ", p), err) }
  }
  return err
}

func (p *WorkflowServiceRespondDecisionTaskCompletedResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetEntityNotExistError() {
    if err := oprot.WriteFieldBegin("entityNotExistError", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:entityNotExistError: ", p), err) }
    if err := p.EntityNotExistError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.EntityNotExistError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:entityNotExistError: ", p), err) }
  }
  return err
}

func (p *WorkflowServiceRespondDecisionTaskCompletedResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("WorkflowServiceRespondDecisionTaskCompletedResult(%+v)", *p)
}

// Attributes:
//  - PollRequest
type WorkflowServicePollForActivityTaskArgs struct {
  PollRequest *shared.PollForActivityTaskRequest `thrift:"pollRequest,1" db:"pollRequest" json:"pollRequest"`
}

func NewWorkflowServicePollForActivityTaskArgs() *WorkflowServicePollForActivityTaskArgs {
  return &WorkflowServicePollForActivityTaskArgs{}
}

var WorkflowServicePollForActivityTaskArgs_PollRequest_DEFAULT *shared.PollForActivityTaskRequest
func (p *WorkflowServicePollForActivityTaskArgs) GetPollRequest() *shared.PollForActivityTaskRequest {
  if !p.IsSetPollRequest() {
    return WorkflowServicePollForActivityTaskArgs_PollRequest_DEFAULT
  }
return p.PollRequest
}
func (p *WorkflowServicePollForActivityTaskArgs) IsSetPollRequest() bool {
  return p.PollRequest != nil
}

func (p *WorkflowServicePollForActivityTaskArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *WorkflowServicePollForActivityTaskArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.PollRequest = &shared.PollForActivityTaskRequest{}
  if err := p.PollRequest.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.PollRequest), err)
  }
  return nil
}

func (p *WorkflowServicePollForActivityTaskArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("PollForActivityTask_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *WorkflowServicePollForActivityTaskArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("pollRequest", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:pollRequest: ", p), err) }
  if err := p.PollRequest.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.PollRequest), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:pollRequest: ", p), err) }
  return err
}

func (p *WorkflowServicePollForActivityTaskArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("WorkflowServicePollForActivityTaskArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - BadRequestError
//  - InternalServiceError
type WorkflowServicePollForActivityTaskResult struct {
  Success *shared.PollForActivityTaskResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
  BadRequestError *shared.BadRequestError `thrift:"badRequestError,1" db:"badRequestError" json:"badRequestError,omitempty"`
  InternalServiceError *shared.InternalServiceError `thrift:"internalServiceError,2" db:"internalServiceError" json:"internalServiceError,omitempty"`
}

func NewWorkflowServicePollForActivityTaskResult() *WorkflowServicePollForActivityTaskResult {
  return &WorkflowServicePollForActivityTaskResult{}
}

var WorkflowServicePollForActivityTaskResult_Success_DEFAULT *shared.PollForActivityTaskResponse
func (p *WorkflowServicePollForActivityTaskResult) GetSuccess() *shared.PollForActivityTaskResponse {
  if !p.IsSetSuccess() {
    return WorkflowServicePollForActivityTaskResult_Success_DEFAULT
  }
return p.Success
}
var WorkflowServicePollForActivityTaskResult_BadRequestError_DEFAULT *shared.BadRequestError
func (p *WorkflowServicePollForActivityTaskResult) GetBadRequestError() *shared.BadRequestError {
  if !p.IsSetBadRequestError() {
    return WorkflowServicePollForActivityTaskResult_BadRequestError_DEFAULT
  }
return p.BadRequestError
}
var WorkflowServicePollForActivityTaskResult_InternalServiceError_DEFAULT *shared.InternalServiceError
func (p *WorkflowServicePollForActivityTaskResult) GetInternalServiceError() *shared.InternalServiceError {
  if !p.IsSetInternalServiceError() {
    return WorkflowServicePollForActivityTaskResult_InternalServiceError_DEFAULT
  }
return p.InternalServiceError
}
func (p *WorkflowServicePollForActivityTaskResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *WorkflowServicePollForActivityTaskResult) IsSetBadRequestError() bool {
  return p.BadRequestError != nil
}

func (p *WorkflowServicePollForActivityTaskResult) IsSetInternalServiceError() bool {
  return p.InternalServiceError != nil
}

func (p *WorkflowServicePollForActivityTaskResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *WorkflowServicePollForActivityTaskResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &shared.PollForActivityTaskResponse{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *WorkflowServicePollForActivityTaskResult)  ReadField1(iprot thrift.TProtocol) error {
  p.BadRequestError = &shared.BadRequestError{}
  if err := p.BadRequestError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.BadRequestError), err)
  }
  return nil
}

func (p *WorkflowServicePollForActivityTaskResult)  ReadField2(iprot thrift.TProtocol) error {
  p.InternalServiceError = &shared.InternalServiceError{}
  if err := p.InternalServiceError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.InternalServiceError), err)
  }
  return nil
}

func (p *WorkflowServicePollForActivityTaskResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("PollForActivityTask_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *WorkflowServicePollForActivityTaskResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *WorkflowServicePollForActivityTaskResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetBadRequestError() {
    if err := oprot.WriteFieldBegin("badRequestError", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:badRequestError: ", p), err) }
    if err := p.BadRequestError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.BadRequestError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:badRequestError: ", p), err) }
  }
  return err
}

func (p *WorkflowServicePollForActivityTaskResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetInternalServiceError() {
    if err := oprot.WriteFieldBegin("internalServiceError", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:internalServiceError: ", p), err) }
    if err := p.InternalServiceError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.InternalServiceError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:internalServiceError: ", p), err) }
  }
  return err
}

func (p *WorkflowServicePollForActivityTaskResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("WorkflowServicePollForActivityTaskResult(%+v)", *p)
}

// Attributes:
//  - HeartbeatRequest
type WorkflowServiceRecordActivityTaskHeartbeatArgs struct {
  HeartbeatRequest *shared.RecordActivityTaskHeartbeatRequest `thrift:"heartbeatRequest,1" db:"heartbeatRequest" json:"heartbeatRequest"`
}

func NewWorkflowServiceRecordActivityTaskHeartbeatArgs() *WorkflowServiceRecordActivityTaskHeartbeatArgs {
  return &WorkflowServiceRecordActivityTaskHeartbeatArgs{}
}

var WorkflowServiceRecordActivityTaskHeartbeatArgs_HeartbeatRequest_DEFAULT *shared.RecordActivityTaskHeartbeatRequest
func (p *WorkflowServiceRecordActivityTaskHeartbeatArgs) GetHeartbeatRequest() *shared.RecordActivityTaskHeartbeatRequest {
  if !p.IsSetHeartbeatRequest() {
    return WorkflowServiceRecordActivityTaskHeartbeatArgs_HeartbeatRequest_DEFAULT
  }
return p.HeartbeatRequest
}
func (p *WorkflowServiceRecordActivityTaskHeartbeatArgs) IsSetHeartbeatRequest() bool {
  return p.HeartbeatRequest != nil
}

func (p *WorkflowServiceRecordActivityTaskHeartbeatArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *WorkflowServiceRecordActivityTaskHeartbeatArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.HeartbeatRequest = &shared.RecordActivityTaskHeartbeatRequest{}
  if err := p.HeartbeatRequest.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.HeartbeatRequest), err)
  }
  return nil
}

func (p *WorkflowServiceRecordActivityTaskHeartbeatArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("RecordActivityTaskHeartbeat_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *WorkflowServiceRecordActivityTaskHeartbeatArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("heartbeatRequest", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:heartbeatRequest: ", p), err) }
  if err := p.HeartbeatRequest.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.HeartbeatRequest), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:heartbeatRequest: ", p), err) }
  return err
}

func (p *WorkflowServiceRecordActivityTaskHeartbeatArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("WorkflowServiceRecordActivityTaskHeartbeatArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - BadRequestError
//  - InternalServiceError
//  - EntityNotExistError
type WorkflowServiceRecordActivityTaskHeartbeatResult struct {
  Success *shared.RecordActivityTaskHeartbeatResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
  BadRequestError *shared.BadRequestError `thrift:"badRequestError,1" db:"badRequestError" json:"badRequestError,omitempty"`
  InternalServiceError *shared.InternalServiceError `thrift:"internalServiceError,2" db:"internalServiceError" json:"internalServiceError,omitempty"`
  EntityNotExistError *shared.EntityNotExistsError `thrift:"entityNotExistError,3" db:"entityNotExistError" json:"entityNotExistError,omitempty"`
}

func NewWorkflowServiceRecordActivityTaskHeartbeatResult() *WorkflowServiceRecordActivityTaskHeartbeatResult {
  return &WorkflowServiceRecordActivityTaskHeartbeatResult{}
}

var WorkflowServiceRecordActivityTaskHeartbeatResult_Success_DEFAULT *shared.RecordActivityTaskHeartbeatResponse
func (p *WorkflowServiceRecordActivityTaskHeartbeatResult) GetSuccess() *shared.RecordActivityTaskHeartbeatResponse {
  if !p.IsSetSuccess() {
    return WorkflowServiceRecordActivityTaskHeartbeatResult_Success_DEFAULT
  }
return p.Success
}
var WorkflowServiceRecordActivityTaskHeartbeatResult_BadRequestError_DEFAULT *shared.BadRequestError
func (p *WorkflowServiceRecordActivityTaskHeartbeatResult) GetBadRequestError() *shared.BadRequestError {
  if !p.IsSetBadRequestError() {
    return WorkflowServiceRecordActivityTaskHeartbeatResult_BadRequestError_DEFAULT
  }
return p.BadRequestError
}
var WorkflowServiceRecordActivityTaskHeartbeatResult_InternalServiceError_DEFAULT *shared.InternalServiceError
func (p *WorkflowServiceRecordActivityTaskHeartbeatResult) GetInternalServiceError() *shared.InternalServiceError {
  if !p.IsSetInternalServiceError() {
    return WorkflowServiceRecordActivityTaskHeartbeatResult_InternalServiceError_DEFAULT
  }
return p.InternalServiceError
}
var WorkflowServiceRecordActivityTaskHeartbeatResult_EntityNotExistError_DEFAULT *shared.EntityNotExistsError
func (p *WorkflowServiceRecordActivityTaskHeartbeatResult) GetEntityNotExistError() *shared.EntityNotExistsError {
  if !p.IsSetEntityNotExistError() {
    return WorkflowServiceRecordActivityTaskHeartbeatResult_EntityNotExistError_DEFAULT
  }
return p.EntityNotExistError
}
func (p *WorkflowServiceRecordActivityTaskHeartbeatResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *WorkflowServiceRecordActivityTaskHeartbeatResult) IsSetBadRequestError() bool {
  return p.BadRequestError != nil
}

func (p *WorkflowServiceRecordActivityTaskHeartbeatResult) IsSetInternalServiceError() bool {
  return p.InternalServiceError != nil
}

func (p *WorkflowServiceRecordActivityTaskHeartbeatResult) IsSetEntityNotExistError() bool {
  return p.EntityNotExistError != nil
}

func (p *WorkflowServiceRecordActivityTaskHeartbeatResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *WorkflowServiceRecordActivityTaskHeartbeatResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &shared.RecordActivityTaskHeartbeatResponse{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *WorkflowServiceRecordActivityTaskHeartbeatResult)  ReadField1(iprot thrift.TProtocol) error {
  p.BadRequestError = &shared.BadRequestError{}
  if err := p.BadRequestError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.BadRequestError), err)
  }
  return nil
}

func (p *WorkflowServiceRecordActivityTaskHeartbeatResult)  ReadField2(iprot thrift.TProtocol) error {
  p.InternalServiceError = &shared.InternalServiceError{}
  if err := p.InternalServiceError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.InternalServiceError), err)
  }
  return nil
}

func (p *WorkflowServiceRecordActivityTaskHeartbeatResult)  ReadField3(iprot thrift.TProtocol) error {
  p.EntityNotExistError = &shared.EntityNotExistsError{}
  if err := p.EntityNotExistError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.EntityNotExistError), err)
  }
  return nil
}

func (p *WorkflowServiceRecordActivityTaskHeartbeatResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("RecordActivityTaskHeartbeat_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *WorkflowServiceRecordActivityTaskHeartbeatResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *WorkflowServiceRecordActivityTaskHeartbeatResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetBadRequestError() {
    if err := oprot.WriteFieldBegin("badRequestError", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:badRequestError: ", p), err) }
    if err := p.BadRequestError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.BadRequestError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:badRequestError: ", p), err) }
  }
  return err
}

func (p *WorkflowServiceRecordActivityTaskHeartbeatResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetInternalServiceError() {
    if err := oprot.WriteFieldBegin("internalServiceError", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:internalServiceError: ", p), err) }
    if err := p.InternalServiceError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.InternalServiceError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:internalServiceError: ", p), err) }
  }
  return err
}

func (p *WorkflowServiceRecordActivityTaskHeartbeatResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetEntityNotExistError() {
    if err := oprot.WriteFieldBegin("entityNotExistError", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:entityNotExistError: ", p), err) }
    if err := p.EntityNotExistError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.EntityNotExistError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:entityNotExistError: ", p), err) }
  }
  return err
}

func (p *WorkflowServiceRecordActivityTaskHeartbeatResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("WorkflowServiceRecordActivityTaskHeartbeatResult(%+v)", *p)
}

// Attributes:
//  - CompleteRequest
type WorkflowServiceRespondActivityTaskCompletedArgs struct {
  CompleteRequest *shared.RespondActivityTaskCompletedRequest `thrift:"completeRequest,1" db:"completeRequest" json:"completeRequest"`
}

func NewWorkflowServiceRespondActivityTaskCompletedArgs() *WorkflowServiceRespondActivityTaskCompletedArgs {
  return &WorkflowServiceRespondActivityTaskCompletedArgs{}
}

var WorkflowServiceRespondActivityTaskCompletedArgs_CompleteRequest_DEFAULT *shared.RespondActivityTaskCompletedRequest
func (p *WorkflowServiceRespondActivityTaskCompletedArgs) GetCompleteRequest() *shared.RespondActivityTaskCompletedRequest {
  if !p.IsSetCompleteRequest() {
    return WorkflowServiceRespondActivityTaskCompletedArgs_CompleteRequest_DEFAULT
  }
return p.CompleteRequest
}
func (p *WorkflowServiceRespondActivityTaskCompletedArgs) IsSetCompleteRequest() bool {
  return p.CompleteRequest != nil
}

func (p *WorkflowServiceRespondActivityTaskCompletedArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *WorkflowServiceRespondActivityTaskCompletedArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.CompleteRequest = &shared.RespondActivityTaskCompletedRequest{}
  if err := p.CompleteRequest.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.CompleteRequest), err)
  }
  return nil
}

func (p *WorkflowServiceRespondActivityTaskCompletedArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("RespondActivityTaskCompleted_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *WorkflowServiceRespondActivityTaskCompletedArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("completeRequest", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:completeRequest: ", p), err) }
  if err := p.CompleteRequest.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.CompleteRequest), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:completeRequest: ", p), err) }
  return err
}

func (p *WorkflowServiceRespondActivityTaskCompletedArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("WorkflowServiceRespondActivityTaskCompletedArgs(%+v)", *p)
}

// Attributes:
//  - BadRequestError
//  - InternalServiceError
//  - EntityNotExistError
type WorkflowServiceRespondActivityTaskCompletedResult struct {
  BadRequestError *shared.BadRequestError `thrift:"badRequestError,1" db:"badRequestError" json:"badRequestError,omitempty"`
  InternalServiceError *shared.InternalServiceError `thrift:"internalServiceError,2" db:"internalServiceError" json:"internalServiceError,omitempty"`
  EntityNotExistError *shared.EntityNotExistsError `thrift:"entityNotExistError,3" db:"entityNotExistError" json:"entityNotExistError,omitempty"`
}

func NewWorkflowServiceRespondActivityTaskCompletedResult() *WorkflowServiceRespondActivityTaskCompletedResult {
  return &WorkflowServiceRespondActivityTaskCompletedResult{}
}

var WorkflowServiceRespondActivityTaskCompletedResult_BadRequestError_DEFAULT *shared.BadRequestError
func (p *WorkflowServiceRespondActivityTaskCompletedResult) GetBadRequestError() *shared.BadRequestError {
  if !p.IsSetBadRequestError() {
    return WorkflowServiceRespondActivityTaskCompletedResult_BadRequestError_DEFAULT
  }
return p.BadRequestError
}
var WorkflowServiceRespondActivityTaskCompletedResult_InternalServiceError_DEFAULT *shared.InternalServiceError
func (p *WorkflowServiceRespondActivityTaskCompletedResult) GetInternalServiceError() *shared.InternalServiceError {
  if !p.IsSetInternalServiceError() {
    return WorkflowServiceRespondActivityTaskCompletedResult_InternalServiceError_DEFAULT
  }
return p.InternalServiceError
}
var WorkflowServiceRespondActivityTaskCompletedResult_EntityNotExistError_DEFAULT *shared.EntityNotExistsError
func (p *WorkflowServiceRespondActivityTaskCompletedResult) GetEntityNotExistError() *shared.EntityNotExistsError {
  if !p.IsSetEntityNotExistError() {
    return WorkflowServiceRespondActivityTaskCompletedResult_EntityNotExistError_DEFAULT
  }
return p.EntityNotExistError
}
func (p *WorkflowServiceRespondActivityTaskCompletedResult) IsSetBadRequestError() bool {
  return p.BadRequestError != nil
}

func (p *WorkflowServiceRespondActivityTaskCompletedResult) IsSetInternalServiceError() bool {
  return p.InternalServiceError != nil
}

func (p *WorkflowServiceRespondActivityTaskCompletedResult) IsSetEntityNotExistError() bool {
  return p.EntityNotExistError != nil
}

func (p *WorkflowServiceRespondActivityTaskCompletedResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *WorkflowServiceRespondActivityTaskCompletedResult)  ReadField1(iprot thrift.TProtocol) error {
  p.BadRequestError = &shared.BadRequestError{}
  if err := p.BadRequestError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.BadRequestError), err)
  }
  return nil
}

func (p *WorkflowServiceRespondActivityTaskCompletedResult)  ReadField2(iprot thrift.TProtocol) error {
  p.InternalServiceError = &shared.InternalServiceError{}
  if err := p.InternalServiceError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.InternalServiceError), err)
  }
  return nil
}

func (p *WorkflowServiceRespondActivityTaskCompletedResult)  ReadField3(iprot thrift.TProtocol) error {
  p.EntityNotExistError = &shared.EntityNotExistsError{}
  if err := p.EntityNotExistError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.EntityNotExistError), err)
  }
  return nil
}

func (p *WorkflowServiceRespondActivityTaskCompletedResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("RespondActivityTaskCompleted_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *WorkflowServiceRespondActivityTaskCompletedResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetBadRequestError() {
    if err := oprot.WriteFieldBegin("badRequestError", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:badRequestError: ", p), err) }
    if err := p.BadRequestError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.BadRequestError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:badRequestError: ", p), err) }
  }
  return err
}

func (p *WorkflowServiceRespondActivityTaskCompletedResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetInternalServiceError() {
    if err := oprot.WriteFieldBegin("internalServiceError", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:internalServiceError: ", p), err) }
    if err := p.InternalServiceError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.InternalServiceError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:internalServiceError: ", p), err) }
  }
  return err
}

func (p *WorkflowServiceRespondActivityTaskCompletedResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetEntityNotExistError() {
    if err := oprot.WriteFieldBegin("entityNotExistError", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:entityNotExistError: ", p), err) }
    if err := p.EntityNotExistError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.EntityNotExistError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:entityNotExistError: ", p), err) }
  }
  return err
}

func (p *WorkflowServiceRespondActivityTaskCompletedResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("WorkflowServiceRespondActivityTaskCompletedResult(%+v)", *p)
}

// Attributes:
//  - FailRequest
type WorkflowServiceRespondActivityTaskFailedArgs struct {
  FailRequest *shared.RespondActivityTaskFailedRequest `thrift:"failRequest,1" db:"failRequest" json:"failRequest"`
}

func NewWorkflowServiceRespondActivityTaskFailedArgs() *WorkflowServiceRespondActivityTaskFailedArgs {
  return &WorkflowServiceRespondActivityTaskFailedArgs{}
}

var WorkflowServiceRespondActivityTaskFailedArgs_FailRequest_DEFAULT *shared.RespondActivityTaskFailedRequest
func (p *WorkflowServiceRespondActivityTaskFailedArgs) GetFailRequest() *shared.RespondActivityTaskFailedRequest {
  if !p.IsSetFailRequest() {
    return WorkflowServiceRespondActivityTaskFailedArgs_FailRequest_DEFAULT
  }
return p.FailRequest
}
func (p *WorkflowServiceRespondActivityTaskFailedArgs) IsSetFailRequest() bool {
  return p.FailRequest != nil
}

func (p *WorkflowServiceRespondActivityTaskFailedArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *WorkflowServiceRespondActivityTaskFailedArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.FailRequest = &shared.RespondActivityTaskFailedRequest{}
  if err := p.FailRequest.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.FailRequest), err)
  }
  return nil
}

func (p *WorkflowServiceRespondActivityTaskFailedArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("RespondActivityTaskFailed_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *WorkflowServiceRespondActivityTaskFailedArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("failRequest", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:failRequest: ", p), err) }
  if err := p.FailRequest.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.FailRequest), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:failRequest: ", p), err) }
  return err
}

func (p *WorkflowServiceRespondActivityTaskFailedArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("WorkflowServiceRespondActivityTaskFailedArgs(%+v)", *p)
}

// Attributes:
//  - BadRequestError
//  - InternalServiceError
//  - EntityNotExistError
type WorkflowServiceRespondActivityTaskFailedResult struct {
  BadRequestError *shared.BadRequestError `thrift:"badRequestError,1" db:"badRequestError" json:"badRequestError,omitempty"`
  InternalServiceError *shared.InternalServiceError `thrift:"internalServiceError,2" db:"internalServiceError" json:"internalServiceError,omitempty"`
  EntityNotExistError *shared.EntityNotExistsError `thrift:"entityNotExistError,3" db:"entityNotExistError" json:"entityNotExistError,omitempty"`
}

func NewWorkflowServiceRespondActivityTaskFailedResult() *WorkflowServiceRespondActivityTaskFailedResult {
  return &WorkflowServiceRespondActivityTaskFailedResult{}
}

var WorkflowServiceRespondActivityTaskFailedResult_BadRequestError_DEFAULT *shared.BadRequestError
func (p *WorkflowServiceRespondActivityTaskFailedResult) GetBadRequestError() *shared.BadRequestError {
  if !p.IsSetBadRequestError() {
    return WorkflowServiceRespondActivityTaskFailedResult_BadRequestError_DEFAULT
  }
return p.BadRequestError
}
var WorkflowServiceRespondActivityTaskFailedResult_InternalServiceError_DEFAULT *shared.InternalServiceError
func (p *WorkflowServiceRespondActivityTaskFailedResult) GetInternalServiceError() *shared.InternalServiceError {
  if !p.IsSetInternalServiceError() {
    return WorkflowServiceRespondActivityTaskFailedResult_InternalServiceError_DEFAULT
  }
return p.InternalServiceError
}
var WorkflowServiceRespondActivityTaskFailedResult_EntityNotExistError_DEFAULT *shared.EntityNotExistsError
func (p *WorkflowServiceRespondActivityTaskFailedResult) GetEntityNotExistError() *shared.EntityNotExistsError {
  if !p.IsSetEntityNotExistError() {
    return WorkflowServiceRespondActivityTaskFailedResult_EntityNotExistError_DEFAULT
  }
return p.EntityNotExistError
}
func (p *WorkflowServiceRespondActivityTaskFailedResult) IsSetBadRequestError() bool {
  return p.BadRequestError != nil
}

func (p *WorkflowServiceRespondActivityTaskFailedResult) IsSetInternalServiceError() bool {
  return p.InternalServiceError != nil
}

func (p *WorkflowServiceRespondActivityTaskFailedResult) IsSetEntityNotExistError() bool {
  return p.EntityNotExistError != nil
}

func (p *WorkflowServiceRespondActivityTaskFailedResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *WorkflowServiceRespondActivityTaskFailedResult)  ReadField1(iprot thrift.TProtocol) error {
  p.BadRequestError = &shared.BadRequestError{}
  if err := p.BadRequestError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.BadRequestError), err)
  }
  return nil
}

func (p *WorkflowServiceRespondActivityTaskFailedResult)  ReadField2(iprot thrift.TProtocol) error {
  p.InternalServiceError = &shared.InternalServiceError{}
  if err := p.InternalServiceError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.InternalServiceError), err)
  }
  return nil
}

func (p *WorkflowServiceRespondActivityTaskFailedResult)  ReadField3(iprot thrift.TProtocol) error {
  p.EntityNotExistError = &shared.EntityNotExistsError{}
  if err := p.EntityNotExistError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.EntityNotExistError), err)
  }
  return nil
}

func (p *WorkflowServiceRespondActivityTaskFailedResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("RespondActivityTaskFailed_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *WorkflowServiceRespondActivityTaskFailedResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetBadRequestError() {
    if err := oprot.WriteFieldBegin("badRequestError", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:badRequestError: ", p), err) }
    if err := p.BadRequestError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.BadRequestError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:badRequestError: ", p), err) }
  }
  return err
}

func (p *WorkflowServiceRespondActivityTaskFailedResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetInternalServiceError() {
    if err := oprot.WriteFieldBegin("internalServiceError", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:internalServiceError: ", p), err) }
    if err := p.InternalServiceError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.InternalServiceError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:internalServiceError: ", p), err) }
  }
  return err
}

func (p *WorkflowServiceRespondActivityTaskFailedResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetEntityNotExistError() {
    if err := oprot.WriteFieldBegin("entityNotExistError", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:entityNotExistError: ", p), err) }
    if err := p.EntityNotExistError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.EntityNotExistError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:entityNotExistError: ", p), err) }
  }
  return err
}

func (p *WorkflowServiceRespondActivityTaskFailedResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("WorkflowServiceRespondActivityTaskFailedResult(%+v)", *p)
}

// Attributes:
//  - CanceledRequest
type WorkflowServiceRespondActivityTaskCanceledArgs struct {
  CanceledRequest *shared.RespondActivityTaskCanceledRequest `thrift:"canceledRequest,1" db:"canceledRequest" json:"canceledRequest"`
}

func NewWorkflowServiceRespondActivityTaskCanceledArgs() *WorkflowServiceRespondActivityTaskCanceledArgs {
  return &WorkflowServiceRespondActivityTaskCanceledArgs{}
}

var WorkflowServiceRespondActivityTaskCanceledArgs_CanceledRequest_DEFAULT *shared.RespondActivityTaskCanceledRequest
func (p *WorkflowServiceRespondActivityTaskCanceledArgs) GetCanceledRequest() *shared.RespondActivityTaskCanceledRequest {
  if !p.IsSetCanceledRequest() {
    return WorkflowServiceRespondActivityTaskCanceledArgs_CanceledRequest_DEFAULT
  }
return p.CanceledRequest
}
func (p *WorkflowServiceRespondActivityTaskCanceledArgs) IsSetCanceledRequest() bool {
  return p.CanceledRequest != nil
}

func (p *WorkflowServiceRespondActivityTaskCanceledArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *WorkflowServiceRespondActivityTaskCanceledArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.CanceledRequest = &shared.RespondActivityTaskCanceledRequest{}
  if err := p.CanceledRequest.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.CanceledRequest), err)
  }
  return nil
}

func (p *WorkflowServiceRespondActivityTaskCanceledArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("RespondActivityTaskCanceled_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *WorkflowServiceRespondActivityTaskCanceledArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("canceledRequest", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:canceledRequest: ", p), err) }
  if err := p.CanceledRequest.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.CanceledRequest), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:canceledRequest: ", p), err) }
  return err
}

func (p *WorkflowServiceRespondActivityTaskCanceledArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("WorkflowServiceRespondActivityTaskCanceledArgs(%+v)", *p)
}

// Attributes:
//  - BadRequestError
//  - InternalServiceError
//  - EntityNotExistError
type WorkflowServiceRespondActivityTaskCanceledResult struct {
  BadRequestError *shared.BadRequestError `thrift:"badRequestError,1" db:"badRequestError" json:"badRequestError,omitempty"`
  InternalServiceError *shared.InternalServiceError `thrift:"internalServiceError,2" db:"internalServiceError" json:"internalServiceError,omitempty"`
  EntityNotExistError *shared.EntityNotExistsError `thrift:"entityNotExistError,3" db:"entityNotExistError" json:"entityNotExistError,omitempty"`
}

func NewWorkflowServiceRespondActivityTaskCanceledResult() *WorkflowServiceRespondActivityTaskCanceledResult {
  return &WorkflowServiceRespondActivityTaskCanceledResult{}
}

var WorkflowServiceRespondActivityTaskCanceledResult_BadRequestError_DEFAULT *shared.BadRequestError
func (p *WorkflowServiceRespondActivityTaskCanceledResult) GetBadRequestError() *shared.BadRequestError {
  if !p.IsSetBadRequestError() {
    return WorkflowServiceRespondActivityTaskCanceledResult_BadRequestError_DEFAULT
  }
return p.BadRequestError
}
var WorkflowServiceRespondActivityTaskCanceledResult_InternalServiceError_DEFAULT *shared.InternalServiceError
func (p *WorkflowServiceRespondActivityTaskCanceledResult) GetInternalServiceError() *shared.InternalServiceError {
  if !p.IsSetInternalServiceError() {
    return WorkflowServiceRespondActivityTaskCanceledResult_InternalServiceError_DEFAULT
  }
return p.InternalServiceError
}
var WorkflowServiceRespondActivityTaskCanceledResult_EntityNotExistError_DEFAULT *shared.EntityNotExistsError
func (p *WorkflowServiceRespondActivityTaskCanceledResult) GetEntityNotExistError() *shared.EntityNotExistsError {
  if !p.IsSetEntityNotExistError() {
    return WorkflowServiceRespondActivityTaskCanceledResult_EntityNotExistError_DEFAULT
  }
return p.EntityNotExistError
}
func (p *WorkflowServiceRespondActivityTaskCanceledResult) IsSetBadRequestError() bool {
  return p.BadRequestError != nil
}

func (p *WorkflowServiceRespondActivityTaskCanceledResult) IsSetInternalServiceError() bool {
  return p.InternalServiceError != nil
}

func (p *WorkflowServiceRespondActivityTaskCanceledResult) IsSetEntityNotExistError() bool {
  return p.EntityNotExistError != nil
}

func (p *WorkflowServiceRespondActivityTaskCanceledResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *WorkflowServiceRespondActivityTaskCanceledResult)  ReadField1(iprot thrift.TProtocol) error {
  p.BadRequestError = &shared.BadRequestError{}
  if err := p.BadRequestError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.BadRequestError), err)
  }
  return nil
}

func (p *WorkflowServiceRespondActivityTaskCanceledResult)  ReadField2(iprot thrift.TProtocol) error {
  p.InternalServiceError = &shared.InternalServiceError{}
  if err := p.InternalServiceError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.InternalServiceError), err)
  }
  return nil
}

func (p *WorkflowServiceRespondActivityTaskCanceledResult)  ReadField3(iprot thrift.TProtocol) error {
  p.EntityNotExistError = &shared.EntityNotExistsError{}
  if err := p.EntityNotExistError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.EntityNotExistError), err)
  }
  return nil
}

func (p *WorkflowServiceRespondActivityTaskCanceledResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("RespondActivityTaskCanceled_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *WorkflowServiceRespondActivityTaskCanceledResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetBadRequestError() {
    if err := oprot.WriteFieldBegin("badRequestError", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:badRequestError: ", p), err) }
    if err := p.BadRequestError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.BadRequestError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:badRequestError: ", p), err) }
  }
  return err
}

func (p *WorkflowServiceRespondActivityTaskCanceledResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetInternalServiceError() {
    if err := oprot.WriteFieldBegin("internalServiceError", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:internalServiceError: ", p), err) }
    if err := p.InternalServiceError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.InternalServiceError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:internalServiceError: ", p), err) }
  }
  return err
}

func (p *WorkflowServiceRespondActivityTaskCanceledResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetEntityNotExistError() {
    if err := oprot.WriteFieldBegin("entityNotExistError", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:entityNotExistError: ", p), err) }
    if err := p.EntityNotExistError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.EntityNotExistError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:entityNotExistError: ", p), err) }
  }
  return err
}

func (p *WorkflowServiceRespondActivityTaskCanceledResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("WorkflowServiceRespondActivityTaskCanceledResult(%+v)", *p)
}

// Attributes:
//  - CancelRequest
type WorkflowServiceRequestCancelWorkflowExecutionArgs struct {
  CancelRequest *shared.RequestCancelWorkflowExecutionRequest `thrift:"cancelRequest,1" db:"cancelRequest" json:"cancelRequest"`
}

func NewWorkflowServiceRequestCancelWorkflowExecutionArgs() *WorkflowServiceRequestCancelWorkflowExecutionArgs {
  return &WorkflowServiceRequestCancelWorkflowExecutionArgs{}
}

var WorkflowServiceRequestCancelWorkflowExecutionArgs_CancelRequest_DEFAULT *shared.RequestCancelWorkflowExecutionRequest
func (p *WorkflowServiceRequestCancelWorkflowExecutionArgs) GetCancelRequest() *shared.RequestCancelWorkflowExecutionRequest {
  if !p.IsSetCancelRequest() {
    return WorkflowServiceRequestCancelWorkflowExecutionArgs_CancelRequest_DEFAULT
  }
return p.CancelRequest
}
func (p *WorkflowServiceRequestCancelWorkflowExecutionArgs) IsSetCancelRequest() bool {
  return p.CancelRequest != nil
}

func (p *WorkflowServiceRequestCancelWorkflowExecutionArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *WorkflowServiceRequestCancelWorkflowExecutionArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.CancelRequest = &shared.RequestCancelWorkflowExecutionRequest{}
  if err := p.CancelRequest.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.CancelRequest), err)
  }
  return nil
}

func (p *WorkflowServiceRequestCancelWorkflowExecutionArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("RequestCancelWorkflowExecution_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *WorkflowServiceRequestCancelWorkflowExecutionArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("cancelRequest", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:cancelRequest: ", p), err) }
  if err := p.CancelRequest.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.CancelRequest), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:cancelRequest: ", p), err) }
  return err
}

func (p *WorkflowServiceRequestCancelWorkflowExecutionArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("WorkflowServiceRequestCancelWorkflowExecutionArgs(%+v)", *p)
}

// Attributes:
//  - BadRequestError
//  - InternalServiceError
//  - EntityNotExistError
type WorkflowServiceRequestCancelWorkflowExecutionResult struct {
  BadRequestError *shared.BadRequestError `thrift:"badRequestError,1" db:"badRequestError" json:"badRequestError,omitempty"`
  InternalServiceError *shared.InternalServiceError `thrift:"internalServiceError,2" db:"internalServiceError" json:"internalServiceError,omitempty"`
  EntityNotExistError *shared.EntityNotExistsError `thrift:"entityNotExistError,3" db:"entityNotExistError" json:"entityNotExistError,omitempty"`
}

func NewWorkflowServiceRequestCancelWorkflowExecutionResult() *WorkflowServiceRequestCancelWorkflowExecutionResult {
  return &WorkflowServiceRequestCancelWorkflowExecutionResult{}
}

var WorkflowServiceRequestCancelWorkflowExecutionResult_BadRequestError_DEFAULT *shared.BadRequestError
func (p *WorkflowServiceRequestCancelWorkflowExecutionResult) GetBadRequestError() *shared.BadRequestError {
  if !p.IsSetBadRequestError() {
    return WorkflowServiceRequestCancelWorkflowExecutionResult_BadRequestError_DEFAULT
  }
return p.BadRequestError
}
var WorkflowServiceRequestCancelWorkflowExecutionResult_InternalServiceError_DEFAULT *shared.InternalServiceError
func (p *WorkflowServiceRequestCancelWorkflowExecutionResult) GetInternalServiceError() *shared.InternalServiceError {
  if !p.IsSetInternalServiceError() {
    return WorkflowServiceRequestCancelWorkflowExecutionResult_InternalServiceError_DEFAULT
  }
return p.InternalServiceError
}
var WorkflowServiceRequestCancelWorkflowExecutionResult_EntityNotExistError_DEFAULT *shared.EntityNotExistsError
func (p *WorkflowServiceRequestCancelWorkflowExecutionResult) GetEntityNotExistError() *shared.EntityNotExistsError {
  if !p.IsSetEntityNotExistError() {
    return WorkflowServiceRequestCancelWorkflowExecutionResult_EntityNotExistError_DEFAULT
  }
return p.EntityNotExistError
}
func (p *WorkflowServiceRequestCancelWorkflowExecutionResult) IsSetBadRequestError() bool {
  return p.BadRequestError != nil
}

func (p *WorkflowServiceRequestCancelWorkflowExecutionResult) IsSetInternalServiceError() bool {
  return p.InternalServiceError != nil
}

func (p *WorkflowServiceRequestCancelWorkflowExecutionResult) IsSetEntityNotExistError() bool {
  return p.EntityNotExistError != nil
}

func (p *WorkflowServiceRequestCancelWorkflowExecutionResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *WorkflowServiceRequestCancelWorkflowExecutionResult)  ReadField1(iprot thrift.TProtocol) error {
  p.BadRequestError = &shared.BadRequestError{}
  if err := p.BadRequestError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.BadRequestError), err)
  }
  return nil
}

func (p *WorkflowServiceRequestCancelWorkflowExecutionResult)  ReadField2(iprot thrift.TProtocol) error {
  p.InternalServiceError = &shared.InternalServiceError{}
  if err := p.InternalServiceError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.InternalServiceError), err)
  }
  return nil
}

func (p *WorkflowServiceRequestCancelWorkflowExecutionResult)  ReadField3(iprot thrift.TProtocol) error {
  p.EntityNotExistError = &shared.EntityNotExistsError{}
  if err := p.EntityNotExistError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.EntityNotExistError), err)
  }
  return nil
}

func (p *WorkflowServiceRequestCancelWorkflowExecutionResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("RequestCancelWorkflowExecution_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *WorkflowServiceRequestCancelWorkflowExecutionResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetBadRequestError() {
    if err := oprot.WriteFieldBegin("badRequestError", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:badRequestError: ", p), err) }
    if err := p.BadRequestError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.BadRequestError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:badRequestError: ", p), err) }
  }
  return err
}

func (p *WorkflowServiceRequestCancelWorkflowExecutionResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetInternalServiceError() {
    if err := oprot.WriteFieldBegin("internalServiceError", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:internalServiceError: ", p), err) }
    if err := p.InternalServiceError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.InternalServiceError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:internalServiceError: ", p), err) }
  }
  return err
}

func (p *WorkflowServiceRequestCancelWorkflowExecutionResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetEntityNotExistError() {
    if err := oprot.WriteFieldBegin("entityNotExistError", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:entityNotExistError: ", p), err) }
    if err := p.EntityNotExistError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.EntityNotExistError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:entityNotExistError: ", p), err) }
  }
  return err
}

func (p *WorkflowServiceRequestCancelWorkflowExecutionResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("WorkflowServiceRequestCancelWorkflowExecutionResult(%+v)", *p)
}

// Attributes:
//  - SignalRequest
type WorkflowServiceSignalWorkflowExecutionArgs struct {
  SignalRequest *shared.SignalWorkflowExecutionRequest `thrift:"signalRequest,1" db:"signalRequest" json:"signalRequest"`
}

func NewWorkflowServiceSignalWorkflowExecutionArgs() *WorkflowServiceSignalWorkflowExecutionArgs {
  return &WorkflowServiceSignalWorkflowExecutionArgs{}
}

var WorkflowServiceSignalWorkflowExecutionArgs_SignalRequest_DEFAULT *shared.SignalWorkflowExecutionRequest
func (p *WorkflowServiceSignalWorkflowExecutionArgs) GetSignalRequest() *shared.SignalWorkflowExecutionRequest {
  if !p.IsSetSignalRequest() {
    return WorkflowServiceSignalWorkflowExecutionArgs_SignalRequest_DEFAULT
  }
return p.SignalRequest
}
func (p *WorkflowServiceSignalWorkflowExecutionArgs) IsSetSignalRequest() bool {
  return p.SignalRequest != nil
}

func (p *WorkflowServiceSignalWorkflowExecutionArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *WorkflowServiceSignalWorkflowExecutionArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.SignalRequest = &shared.SignalWorkflowExecutionRequest{}
  if err := p.SignalRequest.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SignalRequest), err)
  }
  return nil
}

func (p *WorkflowServiceSignalWorkflowExecutionArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("SignalWorkflowExecution_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *WorkflowServiceSignalWorkflowExecutionArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("signalRequest", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:signalRequest: ", p), err) }
  if err := p.SignalRequest.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SignalRequest), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:signalRequest: ", p), err) }
  return err
}

func (p *WorkflowServiceSignalWorkflowExecutionArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("WorkflowServiceSignalWorkflowExecutionArgs(%+v)", *p)
}

// Attributes:
//  - BadRequestError
//  - InternalServiceError
//  - EntityNotExistError
type WorkflowServiceSignalWorkflowExecutionResult struct {
  BadRequestError *shared.BadRequestError `thrift:"badRequestError,1" db:"badRequestError" json:"badRequestError,omitempty"`
  InternalServiceError *shared.InternalServiceError `thrift:"internalServiceError,2" db:"internalServiceError" json:"internalServiceError,omitempty"`
  EntityNotExistError *shared.EntityNotExistsError `thrift:"entityNotExistError,3" db:"entityNotExistError" json:"entityNotExistError,omitempty"`
}

func NewWorkflowServiceSignalWorkflowExecutionResult() *WorkflowServiceSignalWorkflowExecutionResult {
  return &WorkflowServiceSignalWorkflowExecutionResult{}
}

var WorkflowServiceSignalWorkflowExecutionResult_BadRequestError_DEFAULT *shared.BadRequestError
func (p *WorkflowServiceSignalWorkflowExecutionResult) GetBadRequestError() *shared.BadRequestError {
  if !p.IsSetBadRequestError() {
    return WorkflowServiceSignalWorkflowExecutionResult_BadRequestError_DEFAULT
  }
return p.BadRequestError
}
var WorkflowServiceSignalWorkflowExecutionResult_InternalServiceError_DEFAULT *shared.InternalServiceError
func (p *WorkflowServiceSignalWorkflowExecutionResult) GetInternalServiceError() *shared.InternalServiceError {
  if !p.IsSetInternalServiceError() {
    return WorkflowServiceSignalWorkflowExecutionResult_InternalServiceError_DEFAULT
  }
return p.InternalServiceError
}
var WorkflowServiceSignalWorkflowExecutionResult_EntityNotExistError_DEFAULT *shared.EntityNotExistsError
func (p *WorkflowServiceSignalWorkflowExecutionResult) GetEntityNotExistError() *shared.EntityNotExistsError {
  if !p.IsSetEntityNotExistError() {
    return WorkflowServiceSignalWorkflowExecutionResult_EntityNotExistError_DEFAULT
  }
return p.EntityNotExistError
}
func (p *WorkflowServiceSignalWorkflowExecutionResult) IsSetBadRequestError() bool {
  return p.BadRequestError != nil
}

func (p *WorkflowServiceSignalWorkflowExecutionResult) IsSetInternalServiceError() bool {
  return p.InternalServiceError != nil
}

func (p *WorkflowServiceSignalWorkflowExecutionResult) IsSetEntityNotExistError() bool {
  return p.EntityNotExistError != nil
}

func (p *WorkflowServiceSignalWorkflowExecutionResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *WorkflowServiceSignalWorkflowExecutionResult)  ReadField1(iprot thrift.TProtocol) error {
  p.BadRequestError = &shared.BadRequestError{}
  if err := p.BadRequestError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.BadRequestError), err)
  }
  return nil
}

func (p *WorkflowServiceSignalWorkflowExecutionResult)  ReadField2(iprot thrift.TProtocol) error {
  p.InternalServiceError = &shared.InternalServiceError{}
  if err := p.InternalServiceError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.InternalServiceError), err)
  }
  return nil
}

func (p *WorkflowServiceSignalWorkflowExecutionResult)  ReadField3(iprot thrift.TProtocol) error {
  p.EntityNotExistError = &shared.EntityNotExistsError{}
  if err := p.EntityNotExistError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.EntityNotExistError), err)
  }
  return nil
}

func (p *WorkflowServiceSignalWorkflowExecutionResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("SignalWorkflowExecution_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *WorkflowServiceSignalWorkflowExecutionResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetBadRequestError() {
    if err := oprot.WriteFieldBegin("badRequestError", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:badRequestError: ", p), err) }
    if err := p.BadRequestError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.BadRequestError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:badRequestError: ", p), err) }
  }
  return err
}

func (p *WorkflowServiceSignalWorkflowExecutionResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetInternalServiceError() {
    if err := oprot.WriteFieldBegin("internalServiceError", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:internalServiceError: ", p), err) }
    if err := p.InternalServiceError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.InternalServiceError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:internalServiceError: ", p), err) }
  }
  return err
}

func (p *WorkflowServiceSignalWorkflowExecutionResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetEntityNotExistError() {
    if err := oprot.WriteFieldBegin("entityNotExistError", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:entityNotExistError: ", p), err) }
    if err := p.EntityNotExistError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.EntityNotExistError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:entityNotExistError: ", p), err) }
  }
  return err
}

func (p *WorkflowServiceSignalWorkflowExecutionResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("WorkflowServiceSignalWorkflowExecutionResult(%+v)", *p)
}

// Attributes:
//  - TerminateRequest
type WorkflowServiceTerminateWorkflowExecutionArgs struct {
  TerminateRequest *shared.TerminateWorkflowExecutionRequest `thrift:"terminateRequest,1" db:"terminateRequest" json:"terminateRequest"`
}

func NewWorkflowServiceTerminateWorkflowExecutionArgs() *WorkflowServiceTerminateWorkflowExecutionArgs {
  return &WorkflowServiceTerminateWorkflowExecutionArgs{}
}

var WorkflowServiceTerminateWorkflowExecutionArgs_TerminateRequest_DEFAULT *shared.TerminateWorkflowExecutionRequest
func (p *WorkflowServiceTerminateWorkflowExecutionArgs) GetTerminateRequest() *shared.TerminateWorkflowExecutionRequest {
  if !p.IsSetTerminateRequest() {
    return WorkflowServiceTerminateWorkflowExecutionArgs_TerminateRequest_DEFAULT
  }
return p.TerminateRequest
}
func (p *WorkflowServiceTerminateWorkflowExecutionArgs) IsSetTerminateRequest() bool {
  return p.TerminateRequest != nil
}

func (p *WorkflowServiceTerminateWorkflowExecutionArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *WorkflowServiceTerminateWorkflowExecutionArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.TerminateRequest = &shared.TerminateWorkflowExecutionRequest{}
  if err := p.TerminateRequest.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.TerminateRequest), err)
  }
  return nil
}

func (p *WorkflowServiceTerminateWorkflowExecutionArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TerminateWorkflowExecution_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *WorkflowServiceTerminateWorkflowExecutionArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("terminateRequest", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:terminateRequest: ", p), err) }
  if err := p.TerminateRequest.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.TerminateRequest), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:terminateRequest: ", p), err) }
  return err
}

func (p *WorkflowServiceTerminateWorkflowExecutionArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("WorkflowServiceTerminateWorkflowExecutionArgs(%+v)", *p)
}

// Attributes:
//  - BadRequestError
//  - InternalServiceError
//  - EntityNotExistError
type WorkflowServiceTerminateWorkflowExecutionResult struct {
  BadRequestError *shared.BadRequestError `thrift:"badRequestError,1" db:"badRequestError" json:"badRequestError,omitempty"`
  InternalServiceError *shared.InternalServiceError `thrift:"internalServiceError,2" db:"internalServiceError" json:"internalServiceError,omitempty"`
  EntityNotExistError *shared.EntityNotExistsError `thrift:"entityNotExistError,3" db:"entityNotExistError" json:"entityNotExistError,omitempty"`
}

func NewWorkflowServiceTerminateWorkflowExecutionResult() *WorkflowServiceTerminateWorkflowExecutionResult {
  return &WorkflowServiceTerminateWorkflowExecutionResult{}
}

var WorkflowServiceTerminateWorkflowExecutionResult_BadRequestError_DEFAULT *shared.BadRequestError
func (p *WorkflowServiceTerminateWorkflowExecutionResult) GetBadRequestError() *shared.BadRequestError {
  if !p.IsSetBadRequestError() {
    return WorkflowServiceTerminateWorkflowExecutionResult_BadRequestError_DEFAULT
  }
return p.BadRequestError
}
var WorkflowServiceTerminateWorkflowExecutionResult_InternalServiceError_DEFAULT *shared.InternalServiceError
func (p *WorkflowServiceTerminateWorkflowExecutionResult) GetInternalServiceError() *shared.InternalServiceError {
  if !p.IsSetInternalServiceError() {
    return WorkflowServiceTerminateWorkflowExecutionResult_InternalServiceError_DEFAULT
  }
return p.InternalServiceError
}
var WorkflowServiceTerminateWorkflowExecutionResult_EntityNotExistError_DEFAULT *shared.EntityNotExistsError
func (p *WorkflowServiceTerminateWorkflowExecutionResult) GetEntityNotExistError() *shared.EntityNotExistsError {
  if !p.IsSetEntityNotExistError() {
    return WorkflowServiceTerminateWorkflowExecutionResult_EntityNotExistError_DEFAULT
  }
return p.EntityNotExistError
}
func (p *WorkflowServiceTerminateWorkflowExecutionResult) IsSetBadRequestError() bool {
  return p.BadRequestError != nil
}

func (p *WorkflowServiceTerminateWorkflowExecutionResult) IsSetInternalServiceError() bool {
  return p.InternalServiceError != nil
}

func (p *WorkflowServiceTerminateWorkflowExecutionResult) IsSetEntityNotExistError() bool {
  return p.EntityNotExistError != nil
}

func (p *WorkflowServiceTerminateWorkflowExecutionResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *WorkflowServiceTerminateWorkflowExecutionResult)  ReadField1(iprot thrift.TProtocol) error {
  p.BadRequestError = &shared.BadRequestError{}
  if err := p.BadRequestError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.BadRequestError), err)
  }
  return nil
}

func (p *WorkflowServiceTerminateWorkflowExecutionResult)  ReadField2(iprot thrift.TProtocol) error {
  p.InternalServiceError = &shared.InternalServiceError{}
  if err := p.InternalServiceError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.InternalServiceError), err)
  }
  return nil
}

func (p *WorkflowServiceTerminateWorkflowExecutionResult)  ReadField3(iprot thrift.TProtocol) error {
  p.EntityNotExistError = &shared.EntityNotExistsError{}
  if err := p.EntityNotExistError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.EntityNotExistError), err)
  }
  return nil
}

func (p *WorkflowServiceTerminateWorkflowExecutionResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TerminateWorkflowExecution_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *WorkflowServiceTerminateWorkflowExecutionResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetBadRequestError() {
    if err := oprot.WriteFieldBegin("badRequestError", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:badRequestError: ", p), err) }
    if err := p.BadRequestError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.BadRequestError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:badRequestError: ", p), err) }
  }
  return err
}

func (p *WorkflowServiceTerminateWorkflowExecutionResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetInternalServiceError() {
    if err := oprot.WriteFieldBegin("internalServiceError", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:internalServiceError: ", p), err) }
    if err := p.InternalServiceError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.InternalServiceError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:internalServiceError: ", p), err) }
  }
  return err
}

func (p *WorkflowServiceTerminateWorkflowExecutionResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetEntityNotExistError() {
    if err := oprot.WriteFieldBegin("entityNotExistError", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:entityNotExistError: ", p), err) }
    if err := p.EntityNotExistError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.EntityNotExistError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:entityNotExistError: ", p), err) }
  }
  return err
}

func (p *WorkflowServiceTerminateWorkflowExecutionResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("WorkflowServiceTerminateWorkflowExecutionResult(%+v)", *p)
}

// Attributes:
//  - ListRequest
type WorkflowServiceListOpenWorkflowExecutionsArgs struct {
  ListRequest *shared.ListOpenWorkflowExecutionsRequest `thrift:"listRequest,1" db:"listRequest" json:"listRequest"`
}

func NewWorkflowServiceListOpenWorkflowExecutionsArgs() *WorkflowServiceListOpenWorkflowExecutionsArgs {
  return &WorkflowServiceListOpenWorkflowExecutionsArgs{}
}

var WorkflowServiceListOpenWorkflowExecutionsArgs_ListRequest_DEFAULT *shared.ListOpenWorkflowExecutionsRequest
func (p *WorkflowServiceListOpenWorkflowExecutionsArgs) GetListRequest() *shared.ListOpenWorkflowExecutionsRequest {
  if !p.IsSetListRequest() {
    return WorkflowServiceListOpenWorkflowExecutionsArgs_ListRequest_DEFAULT
  }
return p.ListRequest
}
func (p *WorkflowServiceListOpenWorkflowExecutionsArgs) IsSetListRequest() bool {
  return p.ListRequest != nil
}

func (p *WorkflowServiceListOpenWorkflowExecutionsArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *WorkflowServiceListOpenWorkflowExecutionsArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.ListRequest = &shared.ListOpenWorkflowExecutionsRequest{}
  if err := p.ListRequest.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ListRequest), err)
  }
  return nil
}

func (p *WorkflowServiceListOpenWorkflowExecutionsArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ListOpenWorkflowExecutions_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *WorkflowServiceListOpenWorkflowExecutionsArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("listRequest", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:listRequest: ", p), err) }
  if err := p.ListRequest.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ListRequest), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:listRequest: ", p), err) }
  return err
}

func (p *WorkflowServiceListOpenWorkflowExecutionsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("WorkflowServiceListOpenWorkflowExecutionsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - BadRequestError
//  - InternalServiceError
//  - EntityNotExistError
type WorkflowServiceListOpenWorkflowExecutionsResult struct {
  Success *shared.ListOpenWorkflowExecutionsResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
  BadRequestError *shared.BadRequestError `thrift:"badRequestError,1" db:"badRequestError" json:"badRequestError,omitempty"`
  InternalServiceError *shared.InternalServiceError `thrift:"internalServiceError,2" db:"internalServiceError" json:"internalServiceError,omitempty"`
  EntityNotExistError *shared.EntityNotExistsError `thrift:"entityNotExistError,3" db:"entityNotExistError" json:"entityNotExistError,omitempty"`
}

func NewWorkflowServiceListOpenWorkflowExecutionsResult() *WorkflowServiceListOpenWorkflowExecutionsResult {
  return &WorkflowServiceListOpenWorkflowExecutionsResult{}
}

var WorkflowServiceListOpenWorkflowExecutionsResult_Success_DEFAULT *shared.ListOpenWorkflowExecutionsResponse
func (p *WorkflowServiceListOpenWorkflowExecutionsResult) GetSuccess() *shared.ListOpenWorkflowExecutionsResponse {
  if !p.IsSetSuccess() {
    return WorkflowServiceListOpenWorkflowExecutionsResult_Success_DEFAULT
  }
return p.Success
}
var WorkflowServiceListOpenWorkflowExecutionsResult_BadRequestError_DEFAULT *shared.BadRequestError
func (p *WorkflowServiceListOpenWorkflowExecutionsResult) GetBadRequestError() *shared.BadRequestError {
  if !p.IsSetBadRequestError() {
    return WorkflowServiceListOpenWorkflowExecutionsResult_BadRequestError_DEFAULT
  }
return p.BadRequestError
}
var WorkflowServiceListOpenWorkflowExecutionsResult_InternalServiceError_DEFAULT *shared.InternalServiceError
func (p *WorkflowServiceListOpenWorkflowExecutionsResult) GetInternalServiceError() *shared.InternalServiceError {
  if !p.IsSetInternalServiceError() {
    return WorkflowServiceListOpenWorkflowExecutionsResult_InternalServiceError_DEFAULT
  }
return p.InternalServiceError
}
var WorkflowServiceListOpenWorkflowExecutionsResult_EntityNotExistError_DEFAULT *shared.EntityNotExistsError
func (p *WorkflowServiceListOpenWorkflowExecutionsResult) GetEntityNotExistError() *shared.EntityNotExistsError {
  if !p.IsSetEntityNotExistError() {
    return WorkflowServiceListOpenWorkflowExecutionsResult_EntityNotExistError_DEFAULT
  }
return p.EntityNotExistError
}
func (p *WorkflowServiceListOpenWorkflowExecutionsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *WorkflowServiceListOpenWorkflowExecutionsResult) IsSetBadRequestError() bool {
  return p.BadRequestError != nil
}

func (p *WorkflowServiceListOpenWorkflowExecutionsResult) IsSetInternalServiceError() bool {
  return p.InternalServiceError != nil
}

func (p *WorkflowServiceListOpenWorkflowExecutionsResult) IsSetEntityNotExistError() bool {
  return p.EntityNotExistError != nil
}

func (p *WorkflowServiceListOpenWorkflowExecutionsResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *WorkflowServiceListOpenWorkflowExecutionsResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &shared.ListOpenWorkflowExecutionsResponse{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *WorkflowServiceListOpenWorkflowExecutionsResult)  ReadField1(iprot thrift.TProtocol) error {
  p.BadRequestError = &shared.BadRequestError{}
  if err := p.BadRequestError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.BadRequestError), err)
  }
  return nil
}

func (p *WorkflowServiceListOpenWorkflowExecutionsResult)  ReadField2(iprot thrift.TProtocol) error {
  p.InternalServiceError = &shared.InternalServiceError{}
  if err := p.InternalServiceError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.InternalServiceError), err)
  }
  return nil
}

func (p *WorkflowServiceListOpenWorkflowExecutionsResult)  ReadField3(iprot thrift.TProtocol) error {
  p.EntityNotExistError = &shared.EntityNotExistsError{}
  if err := p.EntityNotExistError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.EntityNotExistError), err)
  }
  return nil
}

func (p *WorkflowServiceListOpenWorkflowExecutionsResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ListOpenWorkflowExecutions_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *WorkflowServiceListOpenWorkflowExecutionsResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *WorkflowServiceListOpenWorkflowExecutionsResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetBadRequestError() {
    if err := oprot.WriteFieldBegin("badRequestError", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:badRequestError: ", p), err) }
    if err := p.BadRequestError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.BadRequestError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:badRequestError: ", p), err) }
  }
  return err
}

func (p *WorkflowServiceListOpenWorkflowExecutionsResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetInternalServiceError() {
    if err := oprot.WriteFieldBegin("internalServiceError", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:internalServiceError: ", p), err) }
    if err := p.InternalServiceError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.InternalServiceError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:internalServiceError: ", p), err) }
  }
  return err
}

func (p *WorkflowServiceListOpenWorkflowExecutionsResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetEntityNotExistError() {
    if err := oprot.WriteFieldBegin("entityNotExistError", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:entityNotExistError: ", p), err) }
    if err := p.EntityNotExistError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.EntityNotExistError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:entityNotExistError: ", p), err) }
  }
  return err
}

func (p *WorkflowServiceListOpenWorkflowExecutionsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("WorkflowServiceListOpenWorkflowExecutionsResult(%+v)", *p)
}

// Attributes:
//  - ListRequest
type WorkflowServiceListClosedWorkflowExecutionsArgs struct {
  ListRequest *shared.ListClosedWorkflowExecutionsRequest `thrift:"listRequest,1" db:"listRequest" json:"listRequest"`
}

func NewWorkflowServiceListClosedWorkflowExecutionsArgs() *WorkflowServiceListClosedWorkflowExecutionsArgs {
  return &WorkflowServiceListClosedWorkflowExecutionsArgs{}
}

var WorkflowServiceListClosedWorkflowExecutionsArgs_ListRequest_DEFAULT *shared.ListClosedWorkflowExecutionsRequest
func (p *WorkflowServiceListClosedWorkflowExecutionsArgs) GetListRequest() *shared.ListClosedWorkflowExecutionsRequest {
  if !p.IsSetListRequest() {
    return WorkflowServiceListClosedWorkflowExecutionsArgs_ListRequest_DEFAULT
  }
return p.ListRequest
}
func (p *WorkflowServiceListClosedWorkflowExecutionsArgs) IsSetListRequest() bool {
  return p.ListRequest != nil
}

func (p *WorkflowServiceListClosedWorkflowExecutionsArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *WorkflowServiceListClosedWorkflowExecutionsArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.ListRequest = &shared.ListClosedWorkflowExecutionsRequest{}
  if err := p.ListRequest.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ListRequest), err)
  }
  return nil
}

func (p *WorkflowServiceListClosedWorkflowExecutionsArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ListClosedWorkflowExecutions_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *WorkflowServiceListClosedWorkflowExecutionsArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("listRequest", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:listRequest: ", p), err) }
  if err := p.ListRequest.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ListRequest), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:listRequest: ", p), err) }
  return err
}

func (p *WorkflowServiceListClosedWorkflowExecutionsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("WorkflowServiceListClosedWorkflowExecutionsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - BadRequestError
//  - InternalServiceError
//  - EntityNotExistError
type WorkflowServiceListClosedWorkflowExecutionsResult struct {
  Success *shared.ListClosedWorkflowExecutionsResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
  BadRequestError *shared.BadRequestError `thrift:"badRequestError,1" db:"badRequestError" json:"badRequestError,omitempty"`
  InternalServiceError *shared.InternalServiceError `thrift:"internalServiceError,2" db:"internalServiceError" json:"internalServiceError,omitempty"`
  EntityNotExistError *shared.EntityNotExistsError `thrift:"entityNotExistError,3" db:"entityNotExistError" json:"entityNotExistError,omitempty"`
}

func NewWorkflowServiceListClosedWorkflowExecutionsResult() *WorkflowServiceListClosedWorkflowExecutionsResult {
  return &WorkflowServiceListClosedWorkflowExecutionsResult{}
}

var WorkflowServiceListClosedWorkflowExecutionsResult_Success_DEFAULT *shared.ListClosedWorkflowExecutionsResponse
func (p *WorkflowServiceListClosedWorkflowExecutionsResult) GetSuccess() *shared.ListClosedWorkflowExecutionsResponse {
  if !p.IsSetSuccess() {
    return WorkflowServiceListClosedWorkflowExecutionsResult_Success_DEFAULT
  }
return p.Success
}
var WorkflowServiceListClosedWorkflowExecutionsResult_BadRequestError_DEFAULT *shared.BadRequestError
func (p *WorkflowServiceListClosedWorkflowExecutionsResult) GetBadRequestError() *shared.BadRequestError {
  if !p.IsSetBadRequestError() {
    return WorkflowServiceListClosedWorkflowExecutionsResult_BadRequestError_DEFAULT
  }
return p.BadRequestError
}
var WorkflowServiceListClosedWorkflowExecutionsResult_InternalServiceError_DEFAULT *shared.InternalServiceError
func (p *WorkflowServiceListClosedWorkflowExecutionsResult) GetInternalServiceError() *shared.InternalServiceError {
  if !p.IsSetInternalServiceError() {
    return WorkflowServiceListClosedWorkflowExecutionsResult_InternalServiceError_DEFAULT
  }
return p.InternalServiceError
}
var WorkflowServiceListClosedWorkflowExecutionsResult_EntityNotExistError_DEFAULT *shared.EntityNotExistsError
func (p *WorkflowServiceListClosedWorkflowExecutionsResult) GetEntityNotExistError() *shared.EntityNotExistsError {
  if !p.IsSetEntityNotExistError() {
    return WorkflowServiceListClosedWorkflowExecutionsResult_EntityNotExistError_DEFAULT
  }
return p.EntityNotExistError
}
func (p *WorkflowServiceListClosedWorkflowExecutionsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *WorkflowServiceListClosedWorkflowExecutionsResult) IsSetBadRequestError() bool {
  return p.BadRequestError != nil
}

func (p *WorkflowServiceListClosedWorkflowExecutionsResult) IsSetInternalServiceError() bool {
  return p.InternalServiceError != nil
}

func (p *WorkflowServiceListClosedWorkflowExecutionsResult) IsSetEntityNotExistError() bool {
  return p.EntityNotExistError != nil
}

func (p *WorkflowServiceListClosedWorkflowExecutionsResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *WorkflowServiceListClosedWorkflowExecutionsResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &shared.ListClosedWorkflowExecutionsResponse{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *WorkflowServiceListClosedWorkflowExecutionsResult)  ReadField1(iprot thrift.TProtocol) error {
  p.BadRequestError = &shared.BadRequestError{}
  if err := p.BadRequestError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.BadRequestError), err)
  }
  return nil
}

func (p *WorkflowServiceListClosedWorkflowExecutionsResult)  ReadField2(iprot thrift.TProtocol) error {
  p.InternalServiceError = &shared.InternalServiceError{}
  if err := p.InternalServiceError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.InternalServiceError), err)
  }
  return nil
}

func (p *WorkflowServiceListClosedWorkflowExecutionsResult)  ReadField3(iprot thrift.TProtocol) error {
  p.EntityNotExistError = &shared.EntityNotExistsError{}
  if err := p.EntityNotExistError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.EntityNotExistError), err)
  }
  return nil
}

func (p *WorkflowServiceListClosedWorkflowExecutionsResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ListClosedWorkflowExecutions_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *WorkflowServiceListClosedWorkflowExecutionsResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *WorkflowServiceListClosedWorkflowExecutionsResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetBadRequestError() {
    if err := oprot.WriteFieldBegin("badRequestError", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:badRequestError: ", p), err) }
    if err := p.BadRequestError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.BadRequestError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:badRequestError: ", p), err) }
  }
  return err
}

func (p *WorkflowServiceListClosedWorkflowExecutionsResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetInternalServiceError() {
    if err := oprot.WriteFieldBegin("internalServiceError", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:internalServiceError: ", p), err) }
    if err := p.InternalServiceError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.InternalServiceError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:internalServiceError: ", p), err) }
  }
  return err
}

func (p *WorkflowServiceListClosedWorkflowExecutionsResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetEntityNotExistError() {
    if err := oprot.WriteFieldBegin("entityNotExistError", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:entityNotExistError: ", p), err) }
    if err := p.EntityNotExistError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.EntityNotExistError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:entityNotExistError: ", p), err) }
  }
  return err
}

func (p *WorkflowServiceListClosedWorkflowExecutionsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("WorkflowServiceListClosedWorkflowExecutionsResult(%+v)", *p)
}


